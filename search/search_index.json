{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the (geo-)nerd zone \ud83e\udd13","text":"<p>This site is made and taylored for the MSc Geomatics students at TU Delft, but can probably be used by any geo/GIS/geomatics student.</p>"},{"location":"contribute/","title":"(spotted an error?)","text":"<p>Spotted an error? A page is missing?</p> <p>Then fix it!</p> <p>geogeeks will only stay up-to-date if you help us!</p> <p></p> <ol> <li>On any page: click on the 'Edit this page' </li> <li>You have to login to GitHub</li> <li>Modify the Markdown text following our style guide</li> <li>Create a pull request</li> <li>voil\u00e0</li> </ol>"},{"location":"styleguide/","title":"geogeeks' style guide","text":"<p>This page is intended as a reference for styling conventions used on the site to achieve consistency. The Markdown source can be used as snippets.</p> <p> Visual Studio Code snippets</p> <p>The repository contains snippet shortcut files for Visual Studio Code. On this page, if you see something starting with a backslash <code>\\</code> it is the shortcut for placing that snippet. Make sure in Visual Studio code the following options are enabled: <pre><code>\"editor.quickSuggestions\": {\n    \"other\": \"on\",\n},\n\"editor.inlineSuggest.enabled\": true\n</code></pre></p>"},{"location":"styleguide/#keyboard-shortcuts","title":"Keyboard shortcuts","text":"<p>Use the following styling: Ctrl+Alt+Del <code>++ctrl+alt+del++</code></p> <p>When commands are different across operating systems use the following styles:</p> <p>Inline: Ctrl+Alt+Del (Cmd+Option+Del on macOS) <code>++ctrl+alt+del++ (++cmd+option+del++ on macOS)</code></p> <p>Tabs: <pre><code>=== \":material-microsoft-windows: :simple-linux: Windows &amp; Linux\"\n    ++ctrl+alt+del++\n=== \":simple-apple: macOS\"\n    ++cmd+option+del++\n</code></pre></p>  Windows &amp; Linux macOS <p>Ctrl+Alt+Del</p> <p>Cmd+Option+Del</p>"},{"location":"styleguide/#code-and-files","title":"Code and Files","text":"<p>For inline code use inline code blocks like <code>Matrix::get_row</code> (Code surrounded by backticks `).</p> <p>For multiline code, use multiline code blocks. Try to always state the language the code is in.</p> <p>Code block without stated language:</p> Markdown <pre><code> ```\n # code here\n ```\n</code></pre> <pre><code># Python code here\nimport numpy as np\n</code></pre> <p>Code block with stated language:</p> Markdown <pre><code> ```python\n # code here\n ```\n</code></pre> <pre><code># Python code here\nimport numpy as np\n</code></pre> <p>Filenames can be added to code blocks with the following syntax</p> Markdown <pre><code> ```python title=\"myfile.py\"\n # code here\n ```\n</code></pre> myfile.py<pre><code># code here\n</code></pre> <p>Annotations in code blocks. </p> <p>These are used to add extra information that would otherwise clutter the code block. For example libraries that need to be installed, links to other pages on the website, etc.</p> Markdown <p>The syntax works by placing a comment using the comment syntax of that specific language. Inside the comment place <code>(1)!</code> counting up from 1 for multiple annotations. Below the code block place a numbered list with the comments. The <code>!</code> exclamation mark also removes the comment character. <pre><code> ```python\nimport numpy as np\nimport pandas as pd # (1)!\n\ndata = np.array([2,3,4]) \n ```\n\n1. Here you can write a comment about the code to further explain.\n</code></pre></p> <pre><code>import numpy as np\nimport pandas as pd # (1)!\n\ndata = np.array([2,3,4]) \n</code></pre> <ol> <li>Here you can write a comment about the code to further explain. Links and other markdown features are possible here.</li> </ol>"},{"location":"styleguide/#icons","title":"Icons","text":""},{"location":"styleguide/#languages","title":"Languages","text":"<ul> <li> Python: <code>:simple-python:</code> <code>\\ipython</code></li> <li> C++: <code>:simple-cplusplus:</code> <code>\\icpp</code></li> <li> HTML: <code>:simple-html5:</code> <code>\\ihtml</code></li> <li>:simple-css3: CSS: <code>:simple-css3:</code> <code>\\icss</code></li> <li> Javascript: <code>:simple-javascript:</code> <code>\\ijavascript</code></li> </ul>"},{"location":"styleguide/#os","title":"OS","text":"<ul> <li> Windows: <code>:material-microsoft-windows:</code> <code>\\iwindows</code></li> <li> Linux: <code>:simple-linux:</code> <code>\\ilinux</code></li> <li> macOS: <code>:simple-apple:</code> <code>\\imacos</code>, <code>\\iapple</code></li> <li> www application: <code>:material-web:</code> </li> </ul>"},{"location":"styleguide/#computer","title":"Computer","text":"<ul> <li> Terminal <code>:octicons-terminal-16:</code> <code>\\iterminal</code></li> </ul>"},{"location":"styleguide/#software","title":"Software","text":"<ul> <li> Pycharm <code>:simple-pycharm:</code> <code>\\ipycharm</code></li> <li> CLion <code>:simple-clion:</code> <code>\\iclion</code></li> <li> Visual Studio Code <code>:material-microsoft-visual-studio-code:</code> <code>\\ivscode</code></li> <li> QGIS <code>:simple-qgis:</code> <code>\\iqgis</code></li> <li> ArcGIS <code>:simple-arcgis:</code> <code>\\iarcgis</code></li> </ul>"},{"location":"styleguide/#multiple-instructions","title":"Multiple instructions","text":"<p>For example different operating system, different software, different programming language</p>"},{"location":"styleguide/#operating-system-specific-instructions","title":"Operating-system specific instructions","text":"<p>These should be split into content tabs with consistent tab naming. </p> Markdown <p>Since the website uses global tabs, only use the predefined names:</p> <ul> <li> Windows <code>:material-microsoft-windows: Windows</code> </li> <li> macOS <code>:simple-apple: macOS</code> </li> <li> Linux <code>:simple-linux: Linux</code> </li> <li>  Unix (macOS &amp; Linux) <code>:simple-apple: :simple-linux: Unix (macOS &amp; Linux)</code> </li> <li>  Windows &amp; Linux <code>:material-microsoft-windows: :simple-linux: Windows &amp; Linux</code> (Mainly used for shortcuts)</li> </ul> <p>Windows/macOS/Linux. <code>\\os_win_macos_linux</code>.</p> <pre><code>=== \":material-microsoft-windows: Windows\"\n\n    Windows instructions here\n\n=== \":simple-apple: macOS\"\n\n    macOS instructions here\n\n=== \":simple-linux: Linux\"\n\n    Linux instructions here\n</code></pre>  Windows macOS Linux <p>Windows instructions here</p> <p>macOS instructions here</p> <p>Linux instructions here</p> <p>Windows/Unix. <code>\\ow_win_unix</code>.</p> <pre><code>=== \":material-microsoft-windows: Windows\"\n\n    Windows instructions here\n\n=== \":simple-apple: :simple-linux: Unix (macOS &amp; Linux)\"\n\n    Linux instructions here\n</code></pre>  Windows  Unix (macOS &amp; Linux) <p>Windows instructions here</p> <p>Linux instructions here</p> <p>Windows&amp;Linux/macOS <code>\\os_winlinux_macos</code></p> <pre><code>=== \":material-microsoft-windows: :simple-linux: Windows &amp; Linux\"\n\n    Windows &amp; Linux instructions here\n\n=== \":simple-apple: macOS\"\n\n    macOS instructions here\n</code></pre>  Windows &amp; Linux macOS <p>Windows &amp; Linux instructions here</p> <p>macOS instructions here</p>  Windows macOS Linux <p>Windows instructions here</p> <p>macOS instructions here</p> <p>Linux instructions here</p>"},{"location":"styleguide/#language-specific-instructions","title":"Language-specific instructions","text":"<p>Split instructions/code for different languages into content tabs. You can use the snippets to achieve consistent naming.</p> Markdown <ul> <li>Python: <code>\\pytab</code></li> <li>C++: <code>\\cpptab</code></li> <li>More will be added</li> </ul> <pre><code>=== \":simple-python: Python\"\n\n    ```py\n    # some test code\n    ```\n\n=== \":simple-cplusplus: C++\"\n\n    ```cpp\n    \\\\ Some test code\n    ```\n</code></pre>  Python C++ <pre><code># some test code\n</code></pre> <pre><code>\\\\ Some test code\n</code></pre>"},{"location":"styleguide/#external-linksembeds","title":"External links/embeds","text":""},{"location":"styleguide/#inline-youtube","title":"Inline YouTube","text":"<p>On the page of the YouTube video, select \"Share/Embed Video\" and copy directly the code in the following template:</p> Markdown <p><pre><code>!!! video \"%TODO title here\"\n    &lt;div style=\"display: flex; justify-content: center; padding-bottom: 1em;\"&gt;\n    %TODO Paste the code here\n    &lt;/div&gt;\n    %TODO Write description\n</code></pre> Shortcut: <code>\\video-embed</code></p> <p>Then the markdown will look like this: <pre><code>!!! video \"%TODO title here\"\n    &lt;div style=\"display: flex; justify-content: center; padding-bottom: 1em;\"&gt;\n    &lt;iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen&gt;&lt;/iframe&gt;\n    &lt;/div&gt;\n    %TODO Write description\n</code></pre></p> <p>and you'll get this:</p> <p>%TODO title here</p> <p>  %TODO Write description</p>"},{"location":"styleguide/#external-web-pagestutorials","title":"External web pages/tutorials","text":"<p>Want to recommend an external web page that is not a video? Use the following admonition block:</p> Markdown <pre><code>!!! external-link \"Title of the external resource\"\n    Write your text here and add a link to the external resource\n    using the [title](link to webpage) syntax.\n\n    Make the title long, so the link is clearly visible. So instead of [title](link to webpage) you would write [The official GitHub tutorial](link to webpage).\n</code></pre> <p>Title of the external resource</p> <p>Write your text here and add a link to the external resource using the title syntax.</p> <p>Make the title long, so the link is clearly visible. So instead of title you would write The official GitHub tutorial.</p> <p>It's good to write a short text on why the resource is useful, and if possible give a difficulty tag. Also a screenshot of the web page can help.</p>"},{"location":"computer/","title":"How to setup your computer","text":""},{"location":"computer/bestsoftware/","title":"Best software \ud83c\udfc6","text":"<p>This is where it's getting fun, a totally non-objective list of what the staff of the MSc Geomatics find \"best\" to perform daily tasks with computers.</p> Staff OS Text editor Git client C++ IDE Python IDE LaTeX Reference manager Akshay Linux Visual Studio Code / nano git command line Visual Studio Code Visual Studio Code Overleaf (online) / TexMaker + compile scripts (local) Mendeley Clara macOS / Linux vim / Visual Studio Code git command line Visual Studio Code Visual Studio Code Overleaf (online) / Visual Studio Code Zotero Hugo macOS Sublime Text Sublime Merge CLion Sublime Text Sublime Text + LaTeXTools BibDesk (bundled with MacTeX) Ivan macOS / Linux Vim Terminal CLion PyCharm Texmaker Mendeley Lukas macOS (recent convert) Sublime Text GitHub Desktop C++? Jupyter Lab / VSC Visual Studio Code + Latex Workshop (blatantly appropriated from Maarten) Papers Maarten macOS / Linux Visual Studio Code git / Sublime Merge Visual Studio Code Visual Studio Code Visual Studio Code + Latex Workshop Zotero"},{"location":"computer/filesystem/","title":"Filesystem","text":"<p>Developing software means that you'll interact with the file system of your computer, and you have to understand how it works, how to create files and folder, how to delete, how to navigate, etc.</p> <p>Understanding the file system (Part 1)</p> <p>  This explains the basics: what is a file, an extension, a folder, etc. It is of the utmost importance to fully understand this! Also, since you'll be during the MSc working with Linux, you should also understand how its file system works (it is the same as macOS but rather different from Windows).</p> <p>Understanding the file system (Part 2)</p> <p>  This explains the basics operations on files and folders: creation of them, deletion, moving, copying, etc. The part about macOS is more or less the same for Linux.</p>"},{"location":"computer/packagemanager/","title":"Installing and using a package manager","text":"<p>Package managers make your life easier, it's worth spending a few minutes to figure them out and use them from the start.</p> <p>A package manager is a bit like an app store with many tools for programmers. It helps install, manage, update, and delete programs and tools. We highly recommend using a package manager on your computer.</p> <p>Especially on macOS and Linux, package managers are so popular that many programs recommend using a package manager as the easiest way to install their software.</p> Still not convinced? Here is an (extreme) example <p>Let's say you need the C and C++ compiler <code>gcc</code> for a project.</p> <p>If we go to the official gcc installation instructions, the installation process is split up into 5 steps. These steps include a list of around 30 other pieces of software you will first need to install, and a page with more than 10.000 words about all the configuration options. Click the link above to see the installation instructions for yourself.</p> <p>With the package manager Homebrew (macOS) you can simply run <pre><code>brew install gcc\n</code></pre> And everything will be done automatically for you.</p> <p>Admittedly this is an extreme example, but in general package managers simplify the installation of software quite a bit.</p> <p>Different operating systems have different package managers.</p>  macOS Linux Windows <p>For macOS, we recommend the Homebrew package manager. It's free and open source.</p> <p>To install Homebrew, simply run this command in your terminal and follow the instructions.</p> <p><pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> (This command was taken from the official installation guide)</p> <p>It will probably tell you it needs to install the <code>xcode developer tools</code>, accept this option.</p> <p>On some Macs, Homebrew will advice you to run two extra commands after installation. Please read the last parts of the text that Homebrew printed to your terminal. It might ask you to run these commands: <pre><code>echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' &gt;&gt; ~/.zprofile\neval \"$(/opt/homebrew/bin/brew shellenv)\"\n</code></pre></p> <p>Homebrew is now installed!</p> <p>How to install packages using Homebrew</p> <p>You need to know the name of the package you're installing. Often it's the same (i.e. QGIS is <code>qgis</code>), but sometimes it's different and you need to look it up (See Where to find available packages).</p> <p>For example, if we want to install git we run <pre><code>brew install git\n</code></pre> in your terminal. It will start printing the progress of the installation and tell you when it's done.</p> <p>Some installations have special instructions at the end.</p> Where to find available packages? <p>On the official Homebrew website you can find a search bar to search all available packages.</p> <p></p> <p>In this example, we've searched for \"qgis\", we see in the list the program we're looking for.</p> <p>Casks and formulae</p> <p>Homebrew can be used to install what they call casks and formulae. Simply said, casks are programs like Word and QGIS that have their own window. Formulae are tools that run in the terminal or in the background (like git or a compiler). If a cask and a formula have the same name, you have to add <code>--cask</code> in your installation command to install the cask, otherwise it will install the formula.</p> <p>Clicking on \"qgis\" in the list will give us more information. </p> <ol> <li>Package name</li> <li>Command to install the package</li> <li>Copy button for the installation command</li> <li>Version of the package you're installing.</li> </ol> <p>Simply copy this command, and run it in your terminal</p> <p>More commands</p> <p>Homebrew has more commands, for things like updating and uninstalling. For these, please see the official documentation (specifically <code>info</code>, <code>uninstall</code>, and <code>upgrade</code>).</p> <p>This tab is geared towards Geomatics students using Ubuntu (under Windows Subsystem for Linux). If you're using another distro, we recommend finding a package management guide specific to that distro.</p> <p>Ubuntu comes installed with the <code>apt</code> package manager. It has a huge collection of available packages.</p> <p>How to install packages using apt</p> <p>You need to know the name of the package you're installing. Often it's the same (i.e. QGIS is <code>qgis</code>), but sometimes it's different and you need to look it up (See Where to find available packages).</p> <p>For example, if we want to install git we run <pre><code>sudo apt install git\n</code></pre> in your terminal. You might need to fill in your password. It will start printing the progress of the installation and tell you when it's done.</p> <p>Some installations have special instructions at the end.</p> Where to find available packages? <p>Unlike the other operating systems' package managers, apt does not have a website to search available packages. Instead we use the <code>search</code> command.</p> <p>If we want to install qgis, we run: <pre><code>apt search qgis\n</code></pre> This will print all available packages that contain the search term.</p> <p></p> <p>In this example, we've searched for \"qgis\", we see in the list the program we're looking for (1). It also shows:</p> <ol> <li>The version of this package.</li> <li>What architecture it's available for.</li> </ol> <p>Copy the name here, and run <code>sudo apt install</code> with that name.</p> <p>More commands</p> <p>apt has more commands, for things like updating and uninstalling. For these, we recommend this tutorial.</p> <p>For Windows, we recommend the Chocolatey package manager. We'll be using the free open source version.</p> <p>We recommend it over it's alternatives because of higher availability of packages, but admittedly the authors of this website do not have much experience with Windows package managers.</p> <p>The following instructions were taken from the official Chocolatey installation guide.</p> <p>Step 1: Open your Powershell terminal as administrator</p> <p></p> <p>Using Windows search, search for Powershell, right-click it, and open as administrator.</p> <p>Step 2: Set execution permissions</p> <p>Run this command in Powershell <pre><code>Set-ExecutionPolicy Bypass -Scope Process\n</code></pre> You'll have to confirm by typing <code>Y</code> and pressing enter. This option allows us to run scripts in Powershell. (Note, in the official guide they also mention <code>Set-ExecutionPolicy AllSigned</code> but this option will not allow tools like pyenv to run.)</p> <p>Step 3: Install Chocolatey</p> <p>Paste the following into Powershell and press enter. <pre><code>Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\n</code></pre> Run into an error? Perhaps the command has been updated on the official installation guide.</p> <p>Chocolatey is now installed!</p> <p>How to install packages using Chocolatey</p> <p>You need to know the name of the package you're installing. Often it's the same (i.e. QGIS is <code>qgis</code>), but sometimes it's different and you need to look it up (See Where to find available packages).</p> <p>For example, if we want to install git we run <pre><code>choco install git\n</code></pre> in Powershell. It will start printing the progress of the installation and tell you when it's done.</p> Where to find available packages? <p>On the official community packages page you can find the list of almost 10.000 available packages.</p> <p></p> <p>In this example, we've searched for \"qgis\". The results show:</p> <ol> <li>The latest version of QGIS</li> <li>The LTR version of QGIS, a separate version that has less bugs (usually recommended by teachers).</li> <li>The command to install this package</li> <li>A copy button for the installation command</li> </ol> <p>Simply copy this command, and run it in your Powershell terminal</p> <p>More commands</p> <p>Chocolatey has more commands, for things like updating and uninstalling. For these, please see the official documentation (specifically <code>info</code>, <code>uninstall</code>, and <code>upgrade</code>).</p>"},{"location":"computer/perfectsetup/","title":"Perfect setup for a geomatics engineer","text":"<p>Warning</p> <p>This is really opinionated!</p>  macOS Linux Windows <ul> <li>Package manager: Homebrew for pretty much everything</li> <li>Python: PyCharm as IDE; Python Package Index (PyPI)  as package manager; pyenv as environment manager</li> <li>C++: CLion as IDE; Homebrew as package manager; CMake as builder</li> <li>GIS: QGIS</li> <li>3D data: MeshLab as viewer/editor of 2-manifold meshes; CloudCompare for point clouds; ParaView for volumetric meshes</li> <li>LaTeX: MacTeX as compiler; your favourite text editor as IDE; JabRef for BibTeX management</li> </ul> <ul> <li>Package manager: APT for pretty much everything (we assume you use a Debian-based version like Ubuntu)</li> <li>Python: PyCharm as IDE; Python Package Index (PyPI)  as package manager; pyenv as environment manager</li> <li>C++: CLion as IDE; Advanced Packaging Tool ( <code>apt</code>) as package manager; CMake as builder</li> <li>GIS: QGIS</li> <li>3D data: MeshLab as viewer/editor of 2-manifold meshes; CloudCompare for point clouds; ParaView for volumetric meshes</li> <li>LaTeX: <code>apt install texlive</code> as compiler; your favourite text editor as IDE; JabRef for BibTeX management</li> </ul> <ul> <li>Package manager: Chocolatey to easily install packages without having to click </li> <li>WSL is really important to be able to run Linux</li> <li>Python: PyCharm as IDE; Python Package Index (PyPI)  as package manager; pyenv-win as environment manager</li> <li>C++: CLion as IDE; brew as package manager; CMake as builder</li> <li>GIS: QGIS</li> <li>3D data: MeshLab as viewer/editor of 2-manifold meshes; CloudCompare for point clouds; ParaView for volumetric meshes</li> <li>LaTeX: MikTeX as compiler; your favourite text editor as IDE; JabRef for BibTeX management</li> </ul>"},{"location":"computer/terminal/","title":"Intro to the terminal","text":"<p>The terminal (also called the console, command line interface (CLI)) is a tool to interact with computers by typing textual commands on your keyboard.  Terminals are the \"window\" in which you type commands, and handle user input and output.</p> <p>Warning</p> <p>Notice that while the terms \"terminal\" and \"shell\" are often used interchangeably, they are not the same.</p> <p>A shell is a distinct component of a terminal, it takes the commands you type and translates them into actions that the operating system has to perform.</p> <p>Examples of shells:</p> <ol> <li>bash:  Bourne-Again SHell, common on Linux and macOS</li> <li>zsh: extended bash with many improvements, now default on macOS</li> <li>PowerShell: A Windows shell that integrates command-line shell and scripting language</li> </ol> <p>The terminal is a powerful tool mostly used by developers and power users. It's often a quicker and more precise way to interact with the computer, and it can well be the only way to perform some operations (ie they don't have a graphical-user interface (GUI)).</p>"},{"location":"computer/terminal/#where-is-the-terminal","title":"Where is the terminal??","text":"macOS Linux Windows <p>It's built-in, it's called <code>Terminal.app</code> and it's in the <code>Applications</code> folder.</p> <p>It's built-in, either called <code>GNOME Terminal</code> or <code>Konsole</code>.</p> <p>While the <code>Command Prompt</code> (or <code>cmd</code>) could be used, we do not recommend it as it's too simple. Instead, use the <code>PowerShell</code>, which is already installed on all Windows machine.</p> <p>A terminal emulator on the web</p> <p>Useful to fiddle and learn the basic commands of Linux/macOS.</p> <p>Note</p> <p>Observe that the commands for the PowerShell and those of macOS/Linux will differ slightly. For Windows, you can always install WSL and use the Linux terminal.</p>"},{"location":"computer/terminal/#basic-bash-commands","title":"Basic (bash) commands","text":"<ul> <li><code>cat &lt;file&gt;</code>: print to the console the content of the file</li> <li><code>cd &lt;directory&gt;</code>: change the current directory</li> <li><code>ls</code>: list files and directories</li> <li><code>mkdir &lt;directory&gt;</code>: create a new directory (as a child of <code>pwd</code>)</li> <li><code>mv &lt;file&gt; &lt;new-destination&gt;</code>: move the file to another folder</li> <li><code>pwd</code>: print the current working directory</li> <li><code>rm &lt;file&gt;</code>: remove/delete the file </li> <li><code>touch &lt;file&gt;</code>: create a new file</li> </ul>"},{"location":"computer/terminal/#navigation-in-the-filesystem","title":"Navigation in the filesystem","text":"<p>The Linux filesystem is a tree, its root is <code>/</code>.</p> <ul> <li><code>.</code> (dot): is the current directory (<code>pwd</code> to know where you are)</li> <li><code>..</code>: is the parent directory</li> <li><code>~</code>: is your home folder</li> </ul> <p>So let's say you want to move to the parent folder: <code>cd ..</code></p>"},{"location":"computer/terminal/#file-permissions","title":"File permissions","text":""},{"location":"computer/terminal/#a-video-explaining-all-of-the-above-at-length","title":"A video explaining all of the above at length","text":"<p>Beginner's Guide to the Bash Terminal. \u2b50\ufe0f Beginner</p> <p>  This video gives a very good overview of pretty much everything you need to know. It's long, but totally worth it in our opinion!</p>"},{"location":"cpp/cmake/","title":"CMake","text":"<p>CMake is a cross-platform software for building, installing, and testing C++ code (other languages are supported though).  It does not actually compile the code, but generate a <code>Makefile</code> that can then be used to compile the source code.</p> <p>CMake can also thus be used to generate a project file, eg in CLion.</p>"},{"location":"cpp/cmake/#installing-cmake","title":"Installing CMake","text":"macOS Linux Windows <p><code>brew install cmake</code></p> <p><code>sudo apt-get install build-essential libssl-dev</code></p> <p>If you installed CLion then CMAKE is also installed OR <code>choco install cmake</code></p>"},{"location":"cpp/cmake/#cmake-with-the-console","title":"CMake with the console","text":"<p>If you have a folder in which there is a <code>CMakeLists.txt</code> file (this simple repository shows ones example), follow those steps:</p>  Unix (macOS &amp; Linux) Windows <pre><code>mkdir build\ncd build\ncmake ..\nmake\n./demo_cmake\n</code></pre> <p>Notice that we create a new folder <code>/build</code> so that all the temporary compilation files are not in the same folder, all created files will go in that one folder (which can be safely deleted). The step <code>cmake ..</code> means that the <code>CMakeLists.txt</code> file is located in the parent folder, its output is a <code>Makefile</code> file which allows us to compile the code (and build the binary <code>demo_cmake</code>).</p> <p>TODO</p>"},{"location":"cpp/cmake/#cmake-with-clion","title":"CMake with CLion","text":"<ol> <li> <p>In CLion, create a new project (File &gt; New Project) or click on New Project on the Welcome screen.</p> </li> <li> <p>Set the language to C++ and the type as executable. </p> </li> <li> <p>Select the root folder location (where you want to store the project) and select the language standard. For the latter, note that CGAL requires C++14 or higher.</p> </li> </ol> <p>These steps will create a new CMake-based project in CLion, which will include a minimal <code>main.cpp</code> file for your code and a <code>CMakeLists.txt</code> for the compilation/linking instructions.</p>"},{"location":"cpp/cmake/#making-sense-of-your-cmakeliststxt-file","title":"Making sense of your CMakeLists.txt file","text":"<p>The <code>CMakeLists.txt</code> file that was created by CLion contains four commands:</p> <ol> <li> <p><code>cmake_minimum_required</code>, which specifies the minimum required CMake version to compile your project;</p> </li> <li> <p><code>project</code>, which specifies the name of your project;</p> </li> <li> <p><code>set</code>, which sets a variable called <code>CMAKE_CXX_STANDARD</code> to whatever C++ version you specified as the minimum for your project;</p> </li> <li> <p><code>add_executable</code>, which creates a new compilation target with the same name as your project and adds the <code>main.cpp</code> so that it's compiled</p> </li> </ol>"},{"location":"cpp/cmake/#modifying-your-cmakeliststxt-file-to-add-external-libraries","title":"Modifying your CMakeLists.txt file to add external libraries","text":"<p>Anything in the C++ standard library should work after merely including a header in your <code>main.cpp</code>. No changes to the <code>CMakeLists.txt</code> required. For example, if you want to use <code>std::cout</code> and its <code>&lt;&lt;</code> operator, you just need include <code>iostream</code> in the <code>main.cpp</code>:</p> <pre><code>#include &lt;iostream&gt; \n</code></pre> <p>However, if you need to use an external library (eg CGAL or GDAL), you will first need to add some commands to your <code>CMakeLists.txt</code> for compilation and linking. Every library is different, but the process usually starts by calling a script that finds the library. An example using CGAL:</p> <pre><code>find_package( CGAL REQUIRED )\n</code></pre> <p>The <code>REQUIRED</code> keyword is optional, but it makes CMake generate an error if CGAL is not found. Here's another example asking for GDAL version 3.0 and higher:</p> <pre><code>find_package( GDAL 3.0 )\n</code></pre> <p>These <code>find_package</code> commands set a number of variables with the required paths and also set some compilation targets. For a lot of libraries, this command is followed by the <code>include_directories</code>, which tells CMake to consider the folders where the library's header files (<code>.h</code> or <code>.hpp</code>) are stored. For example, with GDAL it is:</p> <pre><code>include_directories( ${GDAL_INCLUDE_DIR} )\n</code></pre> <p>There, <code>GDAL_INCLUDE_DIR</code> is a variable that was set by <code>find_package</code>. Finally, for most libraries, linking to them is also necessary. An example with GDAL:</p> <pre><code>target_link_libraries(PROJECT_NAME ${GDAL_LIBRARY} )\n</code></pre> <p>Where <code>GDAL_LIBRARY</code> is also a variable that was set by <code>find_package</code>. CGAL is a bit different, since <code>find_package(CGAL)</code> actually sets a target <code>CGAL::CGAL</code> that you should link to. Because of that, you should use something like this:</p> <pre><code>target_link_libraries(PROJECT_NAME CGAL::CGAL)\n</code></pre>"},{"location":"cpp/cmake/#cmake-and-vcpkg","title":"CMake and vcpkg","text":"<p>If you use <code>vcpkg</code>, you probably want to use Visual Studio or the Visual Studio toolchain in CLion.</p> <p>However, if for some reason you prefer to use CMake, note that the libraries installed using <code>vcpkg</code> are installed in the Windows filesystem, not the Linux one of WSL. Therefore, CMake can have trouble finding them.</p> <p>For some libraries, like CGAL, you can modify the <code>find_package</code> command to give it a hint of a path to search for:</p> <pre><code>find_package(CGAL PATHS \"C:/Program Files (x86)/CGAL\")\n</code></pre> <p>For some other libraries, like Boost, you'll have to set the required variables manually:</p> <pre><code>set(BOOST_ROOT \"C:/dev/boost\")\n</code></pre>"},{"location":"cpp/cmake/#a-sample-cmake-file-for-cgal","title":"A sample CMake file for CGAL","text":"<pre><code>cmake_minimum_required(VERSION 3.1)\nproject(PROJECT_NAME)\nset(CMAKE_CXX_STANDARD 14)\nfind_package(CGAL)\nadd_executable(PROJECT_NAME main.cpp)\ntarget_link_libraries(PROJECT_NAME CGAL::CGAL)\n</code></pre>"},{"location":"cpp/install/","title":"How to install a C++ compiler","text":"macOS Linux Windows <p>In the console: <code>xcode-select --install</code> will install clang, gcc, and git.</p> <p>In the console: <code>sudo apt install build-essential</code> will install clang, gcc, and git.</p> <p>If you installed CLion then the C++ compiler is also installed.</p>"},{"location":"cpp/installlibs/","title":"Installing C++ libraries","text":"macOS Linux Windows <p>The easiest way to install external libraries on macOS is to use Homebrew (recommended), although you could install them manually (follow the Linux or Unix instructions if there are none for Mac).</p> <p>An example to install CGAL with Homebrew:</p> <pre><code>brew install eigen\nbrew install cgal\n</code></pre> <p>Another example with GDAL:</p> <pre><code>brew install gdal\n</code></pre> <p>If you're using an Apple Silicon (arm64) Mac, the paths used by Homebrew are: <code>/opt/homebrew/include</code> (for headers) and <code>/opt/homebrew/lib</code> (for libraries).</p> <p>If you're using an Intel (x86-64) Mac, the paths used by Homebrew are: <code>/usr/local/include</code> (for headers) and <code>/usr/local/lib</code> (for libraries).</p> <p>The easiest way to install external libraries on Linux is to use <code>apt</code> (recommended).</p> <p>An example to install CGAL:</p> <pre><code>sudo apt install libeigen3-dev\nsudo apt-get install libcgal-dev\n</code></pre> <p>Another example with GDAL:</p> <pre><code>sudo add-apt-repository ppa:ubuntugis/ppa \nsudo apt update\nsudo apt install gdal-bin libgdal-dev\n</code></pre> <p>TODO</p>"},{"location":"cpp/python2cpp/","title":"Python =&gt; C++","text":""},{"location":"cpp/vcpkgwindows/","title":"Windows: vcpkg with Visual Studio &amp; CLion","text":"<p>Warning</p> <p>We recommend you use Chocolatey to install packages, or WSL.</p> <p>vcpkg is an alternative, but it is more complex and difficult to setup.</p>"},{"location":"cpp/vcpkgwindows/#why-an-alternative-solution","title":"Why an alternative solution?","text":"<p>Using thrid-party libraries can sometimes not be very straightforward on Windows, actually using WSL on Windows is indeed a convenient way.  However, there are some disadvantages:</p> <ul> <li> <p>WSL will incrementally occupy system disk space.</p> <p>WSL is installed on C drive by default, there are quite a lot blogs on the internet to show how to move your WSL to another drive, but usually it is not recommended to avoid possible issues.</p> </li> <li> <p>running project in WSL can be slow</p> <p>It depends on the situation, but practically speaking, the more you use WSL, the slower the compilation speed and the running speed may be as the size of the occupied space increases.</p> <p>Another concern is about gcc/g++ compiler, in some situations, it compiles slower than MSVC(cl.exe) on windows(for example in our practice MSVC compiles CGAL faster)</p> </li> <li> <p>separately isolated file system</p> <p>The file system of WSL is separated from windows, which means only if you have opened WSL from windows, the files in it can be accessed. This is sometimes not convenient.</p> </li> </ul>"},{"location":"cpp/vcpkgwindows/#using-vcpkg-and-visual-studio-on-windows","title":"Using vcpkg and visual studio on windows","text":"<p>What is vcpkg? To be in short, vcpkg is a free C/C++ package manager for acquiring and managing libraries. Maintained by the Microsoft C++ team and open source contributors.</p>"},{"location":"cpp/vcpkgwindows/#install-vcpkg","title":"install vcpkg","text":""},{"location":"cpp/vcpkgwindows/#step-1-clone-the-vcpkg-repo","title":"Step 1: Clone the vcpkg repo","text":"<p><pre><code>git clone https://github.com/Microsoft/vcpkg.git\n</code></pre> Make sure you are in the directory you want the tool installed to before doing this.</p>"},{"location":"cpp/vcpkgwindows/#step-2-run-the-bootstrap-script-to-build-vcpkg","title":"Step 2: Run the bootstrap script to build vcpkg","text":"<pre><code>.\\vcpkg\\bootstrap-vcpkg.bat\n</code></pre>"},{"location":"cpp/vcpkgwindows/#step-3-install-libraries-for-your-project","title":"Step 3: Install libraries for your project","text":"<p>While in the directory of vcpkg:</p> <pre><code>vcpkg install [packages to install]\n</code></pre>"},{"location":"cpp/vcpkgwindows/#step-4-using-vcpkg-with-msbuild-visual-studio-may-require-elevation","title":"Step 4: Using vcpkg with MSBuild / Visual Studio (may require elevation)","text":"<p><pre><code>vcpkg integrate install\n</code></pre> Note: Step 4 is not necessary if you are using CLion.</p> <p>After this, you can create a new project or open an existing one in the IDE. All installed libraries should already be discoverable by IntelliSense and usable in code without additional configuration.</p> <p>For more detailed info, you can refer to vcpkg - get started</p>"},{"location":"cpp/vcpkgwindows/#install-cgal","title":"install CGAL","text":"<pre><code>vcpkg install cgal\n</code></pre> <p>if you want to specify 64bit version:</p> <pre><code>vcpkg install cgal:x64-windows\n</code></pre>"},{"location":"cpp/vcpkgwindows/#install-gdal","title":"install GDAL","text":"<pre><code>vcpkg install GDAL\n</code></pre> <p>Notes:</p> <p>It would be more convenient if you use Windows Powershell. In Powershell, you can install libraries via:</p> <pre><code>PS path\\to\\vcpkg&gt; .\\vcpkg install [package name]\n</code></pre> <p>All in all, using WSL can make you familiar with the linux environment in advance - if you will use linux for development in the future. While if you are using windows platform (as far as I know most of first year students are using it since the Geomatics suggests so), it might be a good idea to use vcpkg and MSVC. </p> <p>And with regard to vcpkg, there is one very comprehensive video:</p> <p>install vcpkg step by step</p> <p>It explains how you download and build vcpkg and use it step by step.</p>"},{"location":"cpp/vcpkgwindows/#using-vcpkg-with-visual-studio","title":"Using vcpkg with Visual Studio","text":"<p>Since we've integrated vcpkg with MSBuild / Visual Studio, you need to do nothing if you are using Visual Studio C++ project. In your header / source files, you can for example just type: <pre><code>#include &lt;CGAL/Polyhedron_3.h&gt;\n</code></pre> and the header file should be automatically detected and included.</p> <p>if you are using CMake project, you need to add corresponding scripts in your CMakeLists.txt file, for example, if you want to include CGAL: <pre><code>find_package(CGAL)\nif (CGAL_FOUND)\n    include(${CGAL_USE_FILE})\n    message(STATUS \"CGAL found\")\n    message(STATUS \"CGAL VERSION\" \" \" ${CGAL_VERSION})\nelse()\n    message(SEND_ERROR \"this code requires the CGAL library\")\n    return()\nendif()\n</code></pre></p>"},{"location":"cpp/vcpkgwindows/#using-vcpkg-with-clion","title":"Using vcpkg with CLion","text":"<p>(1) configure C++ tool chain: File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Toolchains </p> <p>see here for more details.</p> <p>Note: About selecting architecture:</p> <ul> <li> <p>x86: The compiler is the x86 version and the output target is x86.</p> </li> <li> <p>amd64_x86: The compiler is the amd64 version and the output target is x86.</p> </li> <li> <p>amd64: The compiler is the amd64 version and the output target is amd64.</p> </li> <li> <p>x86_amd64: The compiler is the x86 version and the output file is amd64.</p> </li> </ul> <p>(2) configure CMake option: File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; CMake <pre><code>DCMAKE_TOOLCHAIN_FILE=[vcpkg root]/scripts/buildsystems/vcpkg.cmake\n</code></pre> </p> <p>Now you are all set to include your desired library in CMakeLists.txt, for example include CGAL:</p> <p></p>"},{"location":"cpp/wslclion/","title":"Windows: WSL &amp; CLion","text":"<p>By far the simplest way to use in C++ libraries such as CGAL (library to perform geometric operations in 2D, 3D, and even nD), GDAL (library to read/write all the vector/raster formats in GIS), or others (eg GEOS), under Windows is... to install Linux!?</p> <p>Installing all the libraries above is possible directly under Windows, but it is often a massive pain, so we recommend you use WSL--Windows Subsystem for Linux, that is you install a Linux environment \"inside\" your Windows (Win10 or Win11), and use this.</p> <p>Before you continue this tutorial</p> <p>You must first install WSL on your Windows machine.</p>"},{"location":"cpp/wslclion/#install-gdal","title":"Install GDAL","text":"<p>To install GDAL, run the following commands one by one on your Ubuntu terminal:</p> <pre><code>sudo add-apt-repository ppa:ubuntugis/ppa &amp;&amp; sudo apt-get update\n</code></pre> <pre><code>sudo apt-get update\n</code></pre> <pre><code>sudo apt-get install gdal-bin\n</code></pre> <pre><code>sudo apt-get install libgdal-dev\n</code></pre> <p>If everything went correct, you've successfully installed GDAL!  </p>"},{"location":"cpp/wslclion/#install-cgal","title":"Install CGAL","text":"<p>Let's install CGAL now with the following two commands:</p> <pre><code>sudo apt-get update\n</code></pre> <p></p> <pre><code>sudo apt-get install libcgal-dev\n</code></pre> <p></p> <p>If everything went correct, you now have CGAL as well!  </p> <p>Note</p> <p>Before starting to use GDAL and CGAL on CLion, you will need to complete the following two steps. </p>"},{"location":"cpp/wslclion/#install-cmake","title":"Install CMake","text":"<p>To install CMake, run the following commands on your Ubuntu terminal. </p> <p>Install the libraries that CMake depends on:</p> <pre><code>sudo apt-get install build-essential libssl-dev\n</code></pre> <p>Go to the tmp directory:</p> <pre><code>cd /tmp\n</code></pre> <p>Download the source code (change the path to that of the newest version):</p> <pre><code>wget https://github.com/Kitware/CMake/releases/download/v3.28.3/cmake-3.28.3.tar.gz\n</code></pre> <p>When this is complete, extract the file:</p> <pre><code>tar -zxvf cmake-3.28.3.tar.gz\n</code></pre> <p>Go to the extracted folder:</p> <pre><code>cd cmake-3.28.3\n</code></pre> <p>Compile and install CMake:</p> <pre><code>./bootstrap\n</code></pre> <p>This may take some time, you should see the following when it is finished. </p> <p></p> <p>Now run the following command to make it:</p> <pre><code>make\n</code></pre> <p>This step will also take some time. Once it is finished, you can finally install it:</p> <pre><code>sudo make install\n</code></pre> <p>Finally, to check if the installation was successful, you can see the CMake version:</p> <pre><code>cmake --version\n</code></pre> <p></p>"},{"location":"cpp/wslclion/#install-gdb","title":"Install GDB","text":"<p>GDB is a debugger for C++ and you will need it in CLion to connect to WSL. </p> <p>If you are installing GDB right after CMake, you are probably still in the <code>cmake-3.20.0</code> folder on your Ubuntu terminal. First, go back to the home directory:</p> <pre><code>cd ../..\n</code></pre> <p></p> <p>Install GDB with the following two commands:</p> <pre><code>sudo apt-get update\n</code></pre> <pre><code>sudo apt-get install gdb\n</code></pre> <p>If this method does not work for you, you can also install it through the source code as explained in the second option on this [page]. </p> <p>You can verify the installation by checking the GDB version:</p> <pre><code>gdb --version\n</code></pre> <p></p> <p>Once you install GDB, you now have everything you need to connect to WSL in CLion!</p>"},{"location":"cpp/wslclion/#connect-to-clion","title":"Connect to CLion","text":"<p>Warning</p> <p>The steps to connect with WSL may change depending on your CLion version. This tutorial uses CLion 2021.3.</p> <p>Go to Settings from File or by simply pressing Ctrl+Alt+S. </p> <p></p> <p>Under Build, Execution, Deployment, go to Toolchains. Then, add a new toolchain by clicking on the + sign and select WSL. </p> <p></p> <p>It should automatically detect all the fiels (Toolset, CMake, Debugger etc.). However, if you see an error for CMake that it cannot be found, click on Browse on the right-side of CMake and choose the correct file. You can find it under <code>/usr/local/bin/cmake</code>.</p> <p></p> <p>After this step, you may see the following warning under C++ compiler: Test cmake run finished with errors. In this case, reboot your WSL by typing the following command on your Ubuntu terminal:  </p> <pre><code>wsl.exe -t Ubuntu\n</code></pre> <p>This will close the terminal. Simply open it again by searching Ubuntu on your device. Now, if you check CLion again, you should not see the warning anymore. </p> <p>Finally, do not forget to make WSL default by placing it on the top of the listed toolchains. You can do this by dragging WSL to the top, or by using the arrows. </p> <p></p> <p>Success</p> <p>Yay, you can now use GDAL and CGAL on Windows with CLion!</p>"},{"location":"cpp/xcode/","title":"Xcode for macOS","text":""},{"location":"cpp/xcode/#why-an-alternative-solution","title":"Why an alternative solution?","text":"<p>CLion works fine on macOS. However, there are some disadvantages:</p> <ul> <li> <p>CLion is not free in all conditions.</p> <p>CLion is free for students and teachers, as well as for open source projects. Xcode is free for all users and all projects.</p> </li> <li> <p>CLion is slow</p> <p>Compiling with CMake is significantly slower than compiling with Xcode, even when both are set to use <code>clang</code> as the compiler.</p> <p>If CLion is set to use gcc/g++, the performance difference is much bigger and the error messages are much less helpful.</p> </li> </ul>"},{"location":"cpp/xcode/#xcode","title":"Xcode","text":"<p>Xcode is Apple's integrated development environment (IDE) for macOS and is the most common tool that is used to develop Mac applications. </p> <p>Warning</p> <pre><code>Xcode and CGAL work great together as long as you don\u2019t use the Xcode projects generated by CMake and instead create your own.\n</code></pre> <p>First, start by creating a new project (File &gt; New &gt; Project, or select \"Create a new Xcode project\" from the welcome window).  Depending on what you plan to do, it can be any kind of project, but for simple things a 'Command Line Tool' works, which is found in the macOS tab under 'Application'.  If you want something with a native Mac GUI, you probably should go for an App.</p> <p>Once you\u2019ve given your project a name, make sure that the language is set to C++ and click Next. Then decide where to save it, select if you want to create a local Git repository for it and you\u2019re done.  You\u2019re then confronted with the main Xcode window.</p> <p>In short, Xcode works on the basis of projects and targets, just like CLion with CMake.  Without going into much detail, the project contains all your stuff and a target has the aim to create a given executable (or library, plug-in, etc.) based on some of the files in the project.  A project can have many targets, like a codebase that produces two applications (eg macOS and iOS). Some of the settings at the project level cascade down to its targets, but I would recommend you to modify things directly at the target level.</p> <p>So after you select the project (blueprint icon with three sticks that look like an A), select the target (black Terminal-looking icon).  There, on the Build Settings tab, you will find a lot of options in several categories. Select the All and Combined tabs.</p> <p>Many of these options don\u2019t matter too much, but a few can thoroughly mess with your target, so unless you know what something means, leave the options with their defaults.  However, there are a few that you will likely need to modify:</p> <ul> <li>Search Paths &gt; Framework Search Paths: If you\u2019ve installed some dynamic libraries in the form of Mac Frameworks (rather than Mach-O <code>.dylibs</code>, you might want to add <code>/Library/Frameworks</code> here.</li> <li>Search Paths &gt; Header Search Paths: In most cases, you should add <code>/opt/homebrew/include</code> (Apple Silicon) or <code>/usr/local/include</code> (Intel) here.</li> <li>Search Paths &gt; Library Search Paths: In most cases, you should add <code>/opt/homebrew/lib</code> (Apple Silicon) or <code>/usr/local/lib</code> (Intel) here.</li> <li>Apple Clang - Code Generation &gt; Optimization Level &gt; Debug: If you're having performance issues with CGAL, you can increase the optimisation level here to <code>-O1</code> or <code>-O2</code> here. However, this will cause make the Xcode debugger less useful.</li> <li>Apple Clang - Language &gt; C Language Dialect: For better cross-platform code, you should select c11 rather than gnu11 here.</li> <li>Apple Clang - Language - C++ &gt; C++ Language Dialect: Here you should really choose wisely depending on your code and the packages that you're using. The safest bet for old code is probably GNU++98, but many new-ish packages will only work with C++11, C++14, or even C++17 (or the GNU variants). In order to future-proof your code, you should probably select C++17 or even C++20 as much as possible. I personally think it\u2019s nicer to avoid the GCC compliant GNU++ varieties, since these might have issues with other compilers.</li> </ul> <p>Next, go to the Build Phases tab of the same target. Here, you should add all the dynamic libraries that your code will need to link to.  So, open the Link Binary With Libraries collapsible menu and click the \"+\" sign below.</p> <p>You\u2019ll get a cascading sheet containing all the standard macOS X Frameworks as contained in <code>/System/Library/Frameworks</code>.  You\u2019ll also get all the dynamic libraries contained in <code>/usr/lib</code>.  However, CGAL and its dependencies will not be there.</p> <p>So, instead click on the <code>Add Other...</code> dropdown and <code>Add Files...</code>, after which you\u2019ll get a standard Finder Open window. Since the libraries you installed are in <code>/usr/local/lib</code> by default and that directory is by default hidden, just type shift+command+g (<code>\u21e7\u2318G</code>) to Go to a folder and type <code>/usr/local/lib</code>.  There\u2019s autocomplete.</p> <p>In there, you should select all the libraries that your CGAL packages need. Repeat this process a few times or select all the ones you need at the same time using the \u2318 key. For the basic stuff, these would be:</p> <pre><code>libboost_system.dylib or libboost_system-mt.dylib\nlibboost_thread.dylib or libboost_thread-mt.dylib\nlibCGAL_Core.dylib\nlibCGAL.dylib\nlibgmp.dylib\nlibmpfr.dylib\n</code></pre> <p>You might notice that these are actually symlinks to the actual files.  Unfortunately, Xcode will make your code point to the actual files instead.  This means that when you update your dependencies, your Xcode project will not build anymore.  Just check which linked libraries are broken (they will be highlighted in red) and re-add them.</p>"},{"location":"git/","title":"Git, GitHub, or GitLab?","text":"<p>The TUDelft has its own Git server (a GitLab server), staff can create repositories, but at the moment students cannot . Also, the repositories, even if created by staff, are not open to the outside world and thus we do not recommend using TUDelft's GitLab.</p> <p>GitHub is free to use for personal use, even for private repository. This is the preferred option.</p>"},{"location":"git/githubactions/","title":"GitHub Actions","text":"<p>See GitHub Actions help</p> <p></p>"},{"location":"git/gitintro/","title":"Intro to Git","text":"<p>Tip</p> <p>Introduction to git material should get your started with git.</p>"},{"location":"git/goodgit/","title":"A good Git repository","text":"<p>Note</p> <p>This list is inspired by the JOSS review criteria and by the Data Carpentry project's reproducibility.</p> <p>This list contains all the important parts of a good Git repository, that is a repository that others will want to use/replicate/browse. If you work alone with your own private repository, these tips are not necessarily useful. They are for the final code that will come with your MSc thesis.</p>"},{"location":"git/goodgit/#general","title":"General","text":"<ul> <li> The repository should be publicly available</li> </ul>"},{"location":"git/goodgit/#documentation","title":"Documentation","text":"<ul> <li> <p> There should be a README file that indicates </p> <ul> <li>The purpose of the project, what the code is for,</li> <li>Installation instructions</li> <li>Example usage</li> <li>API documentation (if this applies)</li> </ul> </li> <li> <p> The README should be a text file (<code>readme.md</code> or <code>readme.txt</code>), and not a binary file like Word</p> </li> <li> There should be a LICENSE file. (Help with choosing a license)</li> <li> There should be a CITATION file that tells users how to cite the project, data, and code</li> <li> A <code>changelog.md</code> detailing the changes between the releases should be available (help with changelog)</li> <li> There should be clear guidelines for third-parties wishing to: (1) contribute to the software; (2) report issues or problems with the software; (3) seek support</li> </ul>"},{"location":"git/goodgit/#organization","title":"Organization","text":"<ul> <li> <p> Folders should be used to separate data, code, documentation, and results</p> <ul> <li>It is the custom to put all source code in <code>/src</code></li> <li>And <code>/test</code> for unit tests</li> <li>But each language will have different setups and habits</li> <li> The files should use a consistent naming scheme that indicates what they contain</li> </ul> </li> </ul>"},{"location":"git/goodgit/#files-that-should-not-be-added-to-the-repository","title":"Files that should not be added to the repository","text":"<p>All files that are created by compiling/running code should not be added to the Git repository.</p> <p>You can configure your repository to ignore files (so that you don't see them as modified and not committed to the repository).</p> <p>Examples of files to ignore:</p> <ul> <li><code>*.pyc</code> for Python </li> <li><code>*.aux</code> for LaTeX</li> <li><code>*.pdf</code> for LaTeX</li> <li><code>/build</code> the whole build folder for C++</li> </ul>"},{"location":"git/goodgit/#software","title":"Software","text":"<ul> <li> There should be releases to package the software (how to create a release)</li> <li> Is a container available to run the project (e.g., Docker)?</li> <li> Are unit tests available for the code?</li> </ul>"},{"location":"git/goodgit/#data","title":"Data","text":"<ul> <li> If your project has data: are they included or a link is provided?</li> <li> If data is not included, is this because it is not necessary or generated as part of the project?</li> <li> Are your raw data (if any) and processed data files separated?</li> </ul>"},{"location":"git/goodgit/#others","title":"Others","text":"<ul> <li> The code should be well documented</li> <li> Does the repository make use of continuous integration tools to ensure internal reproducibility?</li> </ul>"},{"location":"git/install/","title":"How to install Git","text":""},{"location":"git/install/#github-desktop-application","title":"GitHub Desktop application","text":"<p>By far the simplest method to install Git is to download and install the GitHub Desktop application, it comes with an installation of Git.</p> <p>To use it, you'll need to create a (free) GitHub account.</p> <p> If you use Linux, then there is a fork of the GitHub Desktop (which might be painful to install), or you can use directly the CLI, or check those GUI options.</p>"},{"location":"git/install/#git-in-the-terminal","title":"Git in the terminal","text":"<p>If you use Linux, or if you want to use the terminal, you can install Git this way:</p>  macOS Linux Windows <p>In the console: <code>xcode-select --install</code> will install clang, gcc, and git.</p> <p>It's most likely already installed, verify with <code>git --version</code>, which should return <code>git version 2.42.0</code> (or similar version).</p> <p>If not installed, then <code>sudo apt update</code> + <code>sudo apt install git</code> </p> <p>With Chocolatey: <code>choco install git</code>.</p>"},{"location":"linux/","title":"Linux","text":"<p>For a few courses you'll have to use the operating system Linux </p> <p>You can install Linux on your Windows computers with basically 2 different ways:</p> <ol> <li>with WSL (Windows Subsystem for Linux)</li> <li>by running it virtually with VirtualBox</li> </ol> <p>And you'll have to access some Linux servers using ssh.</p> <p>One big difference is the filesystem, make sure you familiarise yourself with it.</p>"},{"location":"linux/intro/","title":"Introduction to Linux","text":"<p>See slides for introduction to Linux</p>"},{"location":"linux/ssh/","title":"Connecting to a Linux server with ssh","text":"<p>Warning</p> <p>Due to security reasons, many Linux servers at TUDelft cannot be accessed directly, they are behind the TUDelft firewall. </p>  Unix (macOS &amp; Linux) Windows <p>Under Windows it should be possible to do the same as macOS/Linux with puttyssh. </p> <p>The best alternative is to use WSL and follow the same instructions as those for macOS/Linux.</p> <p>To copy files using a graphic interface use WinSCP, and configure a session following the figures here:   </p>"},{"location":"linux/ssh/#connection-is-a-2-step-process-for-tudelft-servers","title":"Connection is a 2-step process for TUDelft servers","text":""},{"location":"linux/ssh/#1-ssh-to-the-tudelft-server","title":"1. ssh to the TUDelft server","text":"<ul> <li>for MSc students: student-linux.tudelft.nl</li> <li>for TUDelft staff: linux-bastion-ex.tudelft.nl</li> </ul> <p><code>ssh mynetid@student-linux.tudelft.nl</code> and password is netid password</p>"},{"location":"linux/ssh/#2-ssh-from-there-to-the-server","title":"2. ssh from there to the server","text":"<p><code>ssh myusername@abcd.tudelft.nl</code> but watch out the password is the one you were given by the admin, it is not your netid</p>"},{"location":"linux/ssh/#avoid-the-2-step-process-and-passwords","title":"Avoid the 2-step process (and passwords)","text":""},{"location":"linux/ssh/#configuration","title":"Configuration","text":"<ol> <li> <p>In your local computer, type <code>ssh-keygen -t ed25519</code> and follow the instructions. It is recommended to use a password to protect your keys. You'll have to use this password everytime you login after you are done, or you can use <code>ssh-add</code> to store it (once after you restart your computer).</p> </li> <li> <p>Create a file named <code>config</code> in your <code>~/.ssh</code> folder (or, just <code>vim ~/.ssh/config</code>) and put the following content:</p> </li> </ol> <pre><code>Host bastion\n  Hostname student-linux.tudelft.nl\n  User netid\n\nHost abcd\n  Hostname abcd.bk.tudelft.nl\n  ProxyCommand ssh -W %h:%p bastion\n  User gUsername\n\nHost xyz\n  Hostname xyz.tudelft.nl\n  ProxyCommand ssh -W %h:%p bastion\n  User wUsername\n</code></pre> <p>Replace <code>netid</code> with your netid, <code>username</code> with your usernames for the 2 fake servers we list here.</p> <ol> <li>Copy your public key (as created in step 1) to all three servers respectively. So:</li> <li><code>ssh-copy-id bastion</code> and give your TU Delft password when prompted.</li> <li><code>ssh-copy-id abcd</code> and give your keys password (set in step 1) and then your server abcd password.</li> <li><code>ssh-copy-id xyz</code> and your keys password (set in step 1) and then your server xyz password.</li> </ol> <p>Beware you might be prompted for the password of your ssh keys multiple times before you are asked for the actual password of the respective user in each server.</p>"},{"location":"linux/ssh/#usage","title":"Usage","text":"<p>As soon as your <code>~/.ssh/config</code> is defined and your public key is copied correctly, you should be able to login to godzilla or the website with the respective commands:   - <code>ssh abcd</code>   - <code>ssh xyz</code></p>"},{"location":"linux/virtualbox/","title":"Running Linux in a virtual environment","text":"<p>See slides to install Ubuntu in VirtualBox</p>"},{"location":"linux/wsl/","title":"WSL (Windows Subsystem for Linux)","text":""},{"location":"linux/wsl/#what-is-wsl","title":"What is WSL?","text":"<p>WSL is an installation of a Linux environment \"inside\" your Windows (Win10 or Win11). It will allow you to run several Linux tools on the command line (eg <code>wget</code>, <code>grep</code>, or <code>ssh</code>), to use databases (eg Postgres) or compilers (eg C++) installed under Linux.</p>"},{"location":"linux/wsl/#how-to-install-wsl-windows-store","title":"How to install WSL (Windows store)","text":"<ol> <li>Open the Microsoft store and install the Windows Subsystem for Linux. </li> <li>Search for \"ubuntu lts\" and install the latest version available (eg 22.04).</li> <li>See this and enable: (1) Virtual Machine Platform and (2) Windows Subsystem for Linux.</li> </ol>"},{"location":"linux/wsl/#how-to-install-wsl-command-line","title":"How to install WSL (command line)","text":"<p>To install WSL, open command prompt as administrator. </p> <p></p> <p>Run the following command:</p> <pre><code>wsl -l -o\n</code></pre> <p>This will list the Linux distributions that are available to install in the online store. Out of those, you probably want to install the latest version of Ubuntu with long-term support (LTS). If you selected Ubuntu-22.04 LTS (meaning from April 2022), that would be:</p> <pre><code>wsl --install -d Ubuntu-22.04\n</code></pre> <p>This will start the process to install WSL on your device. Once the installation is complete, you will need to reboot your device.   </p> <p>After the reboot, wait a couple of seconds for the Ubuntu terminal to open and complete the installation. It will then ask you to specify a username and password. </p> <p></p> <p>Once you complete this step, your WSL is ready to use! </p> <p>If you want to open the current directory in Windows File Explorer, type the following command in the terminal:</p> <pre><code>explorer.exe .\n</code></pre> <p>Note</p> <p>You will not be able to use \"ctrl+c/v\" for Copy/Paste on the Ubuntu terminal. Instead, go to Properties by right-clicking on the top of the terminal and enable Use Ctrl+Shift+C/V as Copy/Paste.</p> <p></p> <p>Warning</p> <p>Some computer companies seem to block virtualization by default, and it needs to be explictly enabled. This is done in the BIOS, follow this manual.</p> <p>Warning</p> <p>Some Windows installations come with either virtualisation features or WSL disabled. See this post to enable them.</p> <p>Warning</p> <p>If you want to install another Linux than Ubuntu (as above) or want to see more options, see the Microsoft Basic commands for WSL.</p>"},{"location":"linux/wsl/#the-windows-terminal-is-recommended","title":"The Windows Terminal is recommended","text":"<p>We recommend you install and use the Windows Terminal instead of the Command Prompt, it's more powerful and flexible.</p>"},{"location":"misc/delftblue/","title":"Using the DelftBlue supercomputer","text":"<p>Note</p> <p>DelftBlue is a high-performance computing cluster that is used for research and education at TU Delft. It is a heterogeneous cluster that consists of a mix of CPU and GPU nodes. It has a good official documentation.</p> <p>If you are supervisor having a student need to use DHPC, or aforementioned student you can request a project for your student. The request form is here and must be filled by the student.</p> <p>Note</p> <p>This is taken from from the blog of Nail Ibrahimli. This is a great general explanation of everything a geomatics student would need to know to use DelftBlue.</p>"},{"location":"misc/delftblue/#introduction","title":"Introduction","text":"<p>I am not an expert in using SLURM and using HPCs, but I have used it for a while now, and I have found it to be a very useful tool for managing HPC jobs. In this post, I will provide a brief introduction to SLURM, DelftBlue and INSY, and I will provide some basic information on how to use SLURM to manage HPC jobs on DelftBlue and INSY clusters.</p> <p>I have noticed that some students \u2014 particularly those with little to no technical background \u2014 are having difficulty using SLURM to manage HPC workloads on the DelftBlue and INSY clusters. This observation was the impetus for this post. I wanted to write a brief tutorial for those students that would cover all the essential information in one location.  This post aims to assist you in getting started with SLURM and HPC tasks on the DelftBlue and INSY clusters. Examples provided here are mainly for GPU-based jobs, but similar principles apply to CPU-based jobs as well.</p> <p>But I would strongly suggest to read the official documentation of DelftBlue and INSY, as it is very well written and has a lot of useful information.</p>"},{"location":"misc/delftblue/#slurm","title":"SLURM","text":"<p>SLURM (Simple Linux Utility for Resource Management) is a powerful open-source cluster management and job scheduling system that is widely used in High Performance Computing (HPC) environments. It is designed to be highly scalable, fault-tolerant, and easy to use.</p> <p>To submit a GPU job to the SLURM scheduler, you will need to use the <code>sbatch</code> command. The <code>sbatch</code> command allows you to submit a batch script to the scheduler, which will then execute the script on the appropriate resources. Here is an example of a simple SLURM batch script that requests one GPU and runs a command:</p> <pre><code>#!/bin/bash\n#SBATCH --gres=gpu:1\n#SBATCH --nodes=1\n#SBATCH --time=00:10:00\n\n# Execute the command\n./your_command\n</code></pre> <p>In this example, the <code>#SBATCH</code> command requests one GPU, one node and it will run for 10 minutes. You can edit the script and include your commands for the job.</p> <p>To submit the job, use the <code>sbatch</code> command followed by the name of the batch script file: <pre><code>sbatch my_job.sh\n</code></pre> Once the job is submitted, you can use the <code>squeue</code> command to view the status of your job. This command will display information about the job such as the job ID, the user who submitted the job, the status of the job, and more.</p> <pre><code>squeue -u &lt;username&gt;\n</code></pre> <p>To cancel a job, you can use the <code>scancel</code> command followed by the job ID. <pre><code>scancel &lt;job_id&gt;\n</code></pre> After your job is completed, you can use the <code>sacct</code> command to view accounting information about your job, including the resources it consumed and the exit status of the job.</p> <p>These are the basic steps for using SLURM to manage GPU-based HPC jobs. Be sure to consult the SLURM documentation for more information on how to use the system, including advanced configuration options and troubleshooting tips.</p>"},{"location":"misc/delftblue/#connecting-to-delftblue","title":"Connecting to DelftBlue","text":"<p><sub><sup>I feel lazy to learn to use GUI based softwares, so I  use terminal, and give command examples </sup></sub></p> <p>To connect to DelftBlue, you will need to use SSH. The login node is <code>login.delftblue.tudelft.nl</code>. You can connect to the login node using the following command:</p> <pre><code>ssh &lt;netid&gt;@login.delftblue.tudelft.nl\n</code></pre>"},{"location":"misc/delftblue/#data-transfer","title":"Data transfer","text":"<ul> <li>SCP (Secure Copy) <sub><sup>Common choice</sup></sub>      Using the <code>scp</code> command, you can copy files to and from DelftBlue. Here are some examples of using the scp command:     <pre><code>scp &lt;source&gt; &lt;target&gt;\n# Copying files from local machine to DelftBlue\nscp &lt;source&gt; &lt;netid&gt;@login.delftblue.tudelft.nl:&lt;target&gt;\n# Copying files from local machine to DelftBlue recursively\nscp -r &lt;source&gt; &lt;netid&gt;@login.delftblue.tudelft.nl:&lt;target&gt;\n# Copying files from DelftBlue to local machine\nscp &lt;netid&gt;@login.delftblue.tudelft.nl:&lt;source&gt; &lt;target&gt;\n# Copying files from DelftBlue to local machine recursively\nscp -r &lt;netid&gt;@login.delftblue.tudelft.nl:&lt;source&gt; &lt;target&gt;\n</code></pre></li> <li>SFTP (Secure File Transfer Protocol) <sub><sup>Personal favourite</sup></sub>      Using the <code>sftp</code> command, you can transfer files to and from DelftBlue. Here are some examples of using the <code>sftp</code> command:     <pre><code>sftp &lt;netid&gt;@login.delftblue.tudelft.nl\n# Changing directory in DelftBlue\ncd &lt;directory&gt;\n# Creating directory in local machine\nlcd &lt;directory&gt;\n# Listing files in DelftBlue\nls\n# Listing files in local machine\nlls \n\n# Just add an 'l' to the beginning of the command to perform the same operation on the local machine\n\n# Copying files from local machine to DelftBlue\nput &lt;source&gt; &lt;target&gt;\n# Copying files from local machine to DelftBlue recursively\nput -r &lt;source&gt; &lt;target&gt;\n# Copying files from DelftBlue to local machine\nget &lt;source&gt; &lt;target&gt;\n# Copying files from DelftBlue to local machine recursively\nget -r &lt;source&gt; &lt;target&gt;\n</code></pre></li> </ul>"},{"location":"misc/delftblue/#loading-modules","title":"Loading modules","text":""},{"location":"misc/delftblue/#what-are-modules","title":"What are modules?","text":"<p>Modules are a way to manage software on a cluster. They allow you to load and unload software packages, and they allow you to manage dependencies between software packages. Modules are loaded using the <code>module</code> command. Here are some examples of using the <code>module</code> command: <pre><code># Loading a module\nmodule load &lt;module_name&gt;\n# Unloading a module\nmodule unload &lt;module_name&gt;\n# Listing loaded modules\nmodule list\n# Listing available modules\nmodule avail\n</code></pre></p>"},{"location":"misc/delftblue/#what-modules-are-available","title":"What modules are available?","text":"<p>The modules available on DelftBlue are listed in the modules page. Use <code>spider</code> command to search for modules <pre><code>module spider &lt;module_name&gt;\n</code></pre></p>"},{"location":"misc/delftblue/#i-am-fully-lost-how-do-i-know-which-modules-i-need","title":"I am fully lost. How do I know which modules I need?","text":"<p>You can use the following command if you are not knowing what you are doing,  <pre><code>module load 2022r2     # load the default DelftBlue software stack\nmodule load cuda/11.6  # or cuda you need\nmodule load miniconda3 # loading the conda\n</code></pre> Checking the cuda version installed <pre><code>[&lt;netid&gt;@login04 ~]$ nvcc -V\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2022 NVIDIA Corporation\nBuilt on Tue_Mar__8_18:18:20_PST_2022\nCuda compilation tools, release 11.6, V11.6.124\nBuild cuda_11.6.r11.6/compiler.31057947_0\n</code></pre></p>"},{"location":"misc/delftblue/#conda-environment","title":"Conda environment","text":""},{"location":"misc/delftblue/#what-is-conda","title":"What is conda?","text":"<p>Conda is an open-source package management system and environment management system that runs on Windows, macOS, and Linux. Conda quickly installs, runs, and updates packages and their dependencies. Conda easily creates, saves, loads, and switches between environments on your local computer. It is mainly used for Python programs.</p>"},{"location":"misc/delftblue/#how-to-use-conda","title":"How to use conda?","text":"<p>To use conda, you will need to load the conda module. Here are some examples of using the <code>conda</code> command: <pre><code># Loading the conda module\nmodule load miniconda3\n# Creating a conda environment\nconda create -n &lt;environment_name&gt; &lt;package_name&gt;\n# Activating a conda environment\nconda activate &lt;environment_name&gt;\n# Deactivating a conda environment\nconda deactivate\n# Listing conda environments\nconda env list\n# Listing packages in a conda environment\nconda list\n# Installing a package in a conda environment\nconda install &lt;package_name&gt; -c &lt;channel_name&gt;\n# Removing a package from a conda environment\nconda remove &lt;package_name&gt;\n# Removing a conda environment\nconda env remove -n &lt;environment_name&gt; --all\n</code></pre></p>"},{"location":"misc/delftblue/#should-i-use-conda-environment-on-delftblue-avoiding-storage-issues","title":"Should I use conda environment on DelftBlue? Avoiding storage issues","text":"<p>Yes, you should use conda environment on DelftBlue. Is that I all need to do? No, the reason is that conda environments are stored in your home directory, and not in the shared file system. This means that you will not run into storage issues when using conda environments. And it will happen very quickly, believe me.</p> <p>To avoid storage issues, you should create a conda environment on the scratch storage and link to them in your home directory. <pre><code>mkdir -p /scratch/${USER}/.conda\nln -s /scratch/${USER}/.conda $HOME/.conda\n</code></pre> On similar lines, you can also create a cache and local folders on the scratch storage and link to them in your home directory. This may also help you avoid storage issues related to <code>pip</code>. <pre><code>mkdir -p /scratch/${USER}/.cache\nln -s /scratch/${USER}/.cache $HOME/.cache\nmkdir -p /scratch/${USER}/.local\nln -s /scratch/${USER}/.local $HOME/.local\n</code></pre></p>"},{"location":"misc/delftblue/#running-jobs-on-gpu-nodes","title":"Running jobs on GPU nodes","text":""},{"location":"misc/delftblue/#sample-sbatch-script-from-actual-project","title":"Sample sbatch script from actual project","text":"<pre><code>#!/bin/sh\n\n# You can control the resources and scheduling with '#SBATCH' settings\n# (see 'man sbatch' for more information on setting these parameters)\n\n\n#SBATCH --job-name=\"CasMVS\"                 # project name\n#SBATCH --partition=gpu                     # partition name it means i want to use gpu\n#SBATCH --time=02:00:00                     # time limit (HH:MM:SS)\n#SBATCH --ntasks=1                          # number of parallel tasks per job is 1\n#SBATCH --cpus-per-task=2                   # number of cores per task    \n#SBATCH --gpus-per-task=1                   # number of GPUs per task\n#SBATCH --mem-per-cpu=1G                    # memory per CPU core\n#SBATCH --account=research-abe-ur           # account name\n\n\n# Measure GPU usage of your job (initialization)\nprevious=$(nvidia-smi --query-accounted-apps='gpu_utilization,mem_utilization,max_memory_usage,time' --format='csv' | /usr/bin/tail -n '+2')\n\n# Use this simple command to check that your sbatch settings are working (it should show the GPU that you requested)\nnvidia-smi\n\n# Your job commands go below here\n\n#module load 2022r2\n#module load cuda/11.6\n\nsrun python train.py    --dataset_name dtu    --root_dir /scratch/&lt;netid&gt;/DTU/dtu/    --num_epochs 16 --batch_size 2    --depth_interval 2.65 --n_depths 8 32 48 --interval_ratios 1.0 2.0 4.0    --optimizer adam --lr 1e-3 --lr_scheduler cosine    --exp_name dtu_cas_group_8 --num_groups 8 --num_gpus 1 &gt; test.log\n\n\n# Your job commands go above here\n\n# Measure GPU usage of your job (result)\nnvidia-smi --query-accounted-apps='gpu_utilization,mem_utilization,max_memory_usage,time' --format='csv' | /usr/bin/grep -v -F \"$previous\"\n</code></pre>"},{"location":"misc/delftblue/#contribute","title":"Contribute","text":"<p>If you find any errors or have any suggestions, please feel free to open an issue or pull request in git.</p>"},{"location":"misc/delftblue/#kudos","title":"Kudos","text":"<ul> <li>Zexin Yang for INSY tutorial</li> <li>SLURM documentation</li> <li>DelftBlue documentation</li> <li>INSY documentation</li> </ul>"},{"location":"programming/chooselanguage/","title":"Choosing a programming language","text":"<p>In the MSc Geomatics you will focus on the following two languages:</p> <ul> <li> Python (Mainly in GEO1000, GEO1015 and GEO5017, also used in GEO1001 and GEO1003)</li> <li> C++ (GEO1004, GEO1016)</li> </ul> <p>Besides these two languages, you'll be introduced to:</p> <ul> <li> HTML + :simple-css3: CSS (GEO1007)</li> <li> JavaScript (GEO1007)</li> </ul> <p>Programming language advise</p>"},{"location":"programming/chooselanguage/#will-your-project-run-in-a-web-browser","title":"Will your project run in a web browser?","text":"<p>Yes No</p>"},{"location":"programming/collabcode/","title":"How to code collaboratively?","text":"<p>In Geomatics, you'll do a lot of coding, and in a lot of assignments, you'll do this as a team. On this page you'll find a list of the different methods for collaborating and our recommendations. Underneath, you'll find a full list of the pros and cons of each method.</p> <ul> <li>Meeting up and writing everything together on the same computer: Recommended for helping each other, and for starting new projects. Can be used in combination with a version control system (see below).</li> <li>Sending each other snippets of code: Only recommended for helping each other if meeting up is not possible. Not recommended for projects.</li> <li>Each person works on their own file and at the end you combine them: Not recommended without also using a version control system.</li> <li>Using realtime code collaboration tools (like Google Docs but for coding):  Not recommended without also using a version control system.</li> <li>Using a version control system like git: Highly recommended to learn and start using as early as possible, even for small projects.</li> </ul>"},{"location":"programming/collabcode/#pros-and-cons","title":"Pros and cons:","text":"Method Pros Cons Meeting up and writing everything together on the same computer. <ul> <li>Simple and no merging difficulties.</li> <li>Easy to discuss, everyone knows what is going on.</li> <li>Quick to make decisions and get things started.</li> </ul> <ul> <li>No individual responsibilities.</li> <li>Learning programming can be faster and more effective by writing code and experimenting yourself than by reading and discussing it.</li> <li>Takes more time.</li> <li>Sometimes difficult to schedule meeting.</li> </ul> Sending each other snippets of code. <ul> <li>Simple and quick.</li> <li>No need for setup or installing any tools.</li> <li>Very suitable for helping with bugs or quick suggestions.</li> </ul> <ul> <li>Only for very small projects or quick fixes.</li> <li>Difficult to track history.</li> <li>Leads to mistakes and misunderstandings.</li> <li>Difficult to work simultaneously.</li> </ul> Each person works on their own file, and at the end you combine them <ul> <li>Clear responsibilities of who works on what.</li> <li>No need for setup or installing any tools.</li> <li>Possible to work simultaneously.</li> </ul> <ul> <li>Merging can be difficult and take a long time.</li> <li>You only find bugs at the end, while combining.</li> <li>Difficult to get an overview of the project.</li> <li>Difficult to track history.</li> <li>Only for small projects.</li> </ul> Using realtime code collaboration tools (like Google Docs but for coding). <ul> <li>Very easy to use.</li> <li>You can see in real-time what people are working on.</li> <li>No merge conflicts.</li> </ul> <ul> <li>Requires constant internet connection.</li> <li>Everyone needs to use the same software.</li> <li>Often a paid feature.</li> <li>Is missing many of the tools a version control system offers.</li> </ul> Using a version control system like git. <ul> <li>Tracks by who, when, and why changes were made.</li> <li>Works from tiny to enormous projects.</li> <li>Also very useful for individual projects.</li> <li>Never fear to make changes, as you can always undo them.</li> <li>No internet required, only when syncing changes.</li> <li>Used by almost all big software projects/companies.</li> <li>Can be used to back up your code.</li> </ul> <ul> <li>Takes time to set up.</li> <li>Everyone needs to download and learn the tool.</li> <li>Can be intimidating to learn, especially the command line.</li> <li>Merge conflicts can be tricky to solve.</li> <li>Advanced features can be quite complicated.</li> <li>You need to remember to commit changes and write a description.</li> <li>You need to agree who works on what, because you only find out what your team is working on after they commit and push the changes.</li> </ul>"},{"location":"programming/debugging/","title":"Debugging","text":"<p>What is a \"bug\"?</p> <p>In programming we call a \"bug\" any kind of issue occuring in our code that obstructs us from getting the result we are after. For example this could be an error message or your program crashing or an incorrect result.</p> <p>Fun fact: Did you know? Bugs owe their name to a historical computer that ran into issues, because a moth had crawled into it!</p> <p>Every programmer, no matter how experienced, runs into bugs with the code they write. Debugging is everything related to finding and fixing these problems. This page gives you some different debugging strategies to help you solve these bugs.</p> <p>Challenge</p> <p>Can you find the bug in this Python example? <pre><code>csv_path = \"/Documents/salaries.csv\"\n\nwith open(csv_path, \"r\") as f:\n    csv_lines = f.readlines()\n\nrow_idx = 0\ntotal = 0\nfor row in csv_lines:\n    # Skip the header row\n    if row_idx == 0:\n        continue\n\n    name, salary = row.split(',')\n\n    total += int(salary)\n    row_idx += 1\n\nprint(\"Total: \", total)\n</code></pre></p> <p>Did you find it? If yes, you might have noticed that \"Total: 0\" is the printed answer. These kind of bugs can happen any time and can be difficult to spot, especially when your code becomes more complex than this simple example.</p> Answer <p>The code uses the variable <code>row_idx</code> to keep track of which row the loop is at. It uses this index to skip the header row (the row with index 0). However, when it skips the header, it does not increment the <code>row_idx</code>. This means the <code>row_idx</code> always stays zero, so every row of the csv file gets skipped by the <code>continue</code> statement.</p>"},{"location":"programming/debugging/#debugging-strategies","title":"Debugging strategies","text":""},{"location":"programming/debugging/#1-rubber-duck-debugging","title":"1. Rubber duck debugging","text":"<p>Sometimes just going through your code line by line can help you find the solution. You can use the rubber duck debugging method for this:</p> <ol> <li>Beg, borrow, steal, buy, fabricate or otherwise obtain a rubber duck (bathtub variety).</li> <li>Place rubber duck on desk and inform it you are just going to go over some code with it, if that\u2019s all right.</li> <li>Explain to the duck what your code is supposed to do, and then go into detail and explain your code line by line.</li> <li>At some point you will tell the duck what you are doing next and then realise that that is not in fact what you are actually doing. The duck will sit there serenely, happy in the knowledge that it has helped you on your way.</li> </ol> <p>Note: In a pinch a coworker might be able to substitute for the duck, however, it is often preferred to confide mistakes to the duck instead of your coworker.</p> <p>From rubberduckdebugging.com</p> <p>In our original example this might look something like:</p> <ul> <li>\"I load the csv file. The filepath is correct, I checked. The file has multiple lines so the total should be higher than 0.\"</li> <li>\"Then I make the <code>row_idx</code> and <code>total</code> variables and set them both to zero. I will use these to keep track of the active line in the loop and the total sum of the salary.\"</li> <li>\"Then I loop through the rows of the csv file.\"</li> <li>\"Because the first row has the headers, I can't use them for the total. The index of the first row is zero, so I skip it with <code>continue</code>.\"</li> <li>\"Ohhhhh, I forgot to update the <code>row_idx</code> when I skip the header!\"</li> </ul>"},{"location":"programming/debugging/#2-print-debugging","title":"2. Print debugging","text":"<p>Another method of debugging is to add print statements in your code to see what might be happening. If we do this in our original example, we get:</p> <pre><code>csv_path = \"/Documents/salaries.csv\"\n\nwith open(csv_path, \"r\") as f:\n    csv_lines = f.readlines()\n\nprint(\"CSV file opened\")\nprint(\"File line count:\", len(csv_lines))\n\nrow_idx = 0\ntotal = 0\nfor row in csv_lines:\n    print(\"Processing row:\", row)\n    # Skip the header row\n    if row_idx == 0:\n        print(\"Skipping row\")\n        continue\n\n    name, salary = row.split(',')\n    print(\"Adding salary:\", salary)\n    total += int(salary)\n    print(\"New total is:\", total)\n    row_idx += 1\n\nprint(\"Total: \", total)\n</code></pre> <p> This will print:</p> <p><pre><code>CSV file opened\nFile line count: 3\nProcessing row: name,salary\nSkipping row\nProcessing row: john,1200\nSkipping row\nProcessing row: jack,1400\nSkipping row\nTotal:  0\n</code></pre> Now we can immediately see what is happening. All rows get correctly loaded, but every row gets skipped. Using this information, we can figure out the bug.</p>"},{"location":"programming/debugging/#3-debugging-using-a-debugger","title":"3. Debugging using a debugger","text":"<p>The most powerful method of debugging is to use debugger software. Sometimes the issues you face can become so complex that simple print statements won't give you enough information.</p> <p>Using a debugger, you can pause the execution of your code and see the values of all the variables. Then, you can use the tools of the debugger to walk step by step through the lines of your code, and see how the variables change. A debugger will also pause the execution of your code when an error occurs, so you can see the values of all the variables at the moment of the error.</p> <p>Pycharm debugger tutorial</p> <p>Basis Pycharm debugging tutorial</p> <p> Why watch this? If you're using Python and Pycharm, and want to know how to get started using the debugger.</p> <p> Why watch this? If you're using Python and Pycharm a lot, and you want to know every single possibility of the Pycharm debugger.</p> <p>%% TODO - Cpp specific (Clion) - Mention CLI debuggers - Debugging basics (step over, step in) - Debugging exercises</p>"},{"location":"programming/_decision_tree/local/","title":"Is your project a mobile application?","text":"<p>Yes No</p> <p>What is a mobile application?</p> <p>A mobile application is anything that runs on your smartphone. Usually, this means apps downloaded from an app store, but it can also mean a website that acts as if it's an app.</p>"},{"location":"programming/_decision_tree/local/desktop/","title":"What is more important?","text":"<p>Program runs faster, but coding takes longer Program runs slower, but coding is faster</p> <p>TODO description with help about what option to choose. Make Geomatics specific</p>"},{"location":"programming/_decision_tree/local/desktop/compiled/","title":"Compiled systems programming languages","text":""},{"location":"programming/_decision_tree/local/desktop/compiled/#languages","title":"Languages","text":"<ul> <li>C++</li> </ul>"},{"location":"programming/_decision_tree/local/desktop/compiled/#optionally","title":"Optionally","text":"<ul> <li>C</li> <li>Rust</li> </ul> <p>TODO description and geomatics specific</p>"},{"location":"programming/_decision_tree/local/desktop/interpreted/","title":"Interpreted languages","text":""},{"location":"programming/_decision_tree/local/desktop/interpreted/#languages","title":"Languages","text":"<ul> <li>Python</li> </ul>"},{"location":"programming/_decision_tree/local/desktop/interpreted/#optionally","title":"Optionally","text":"<ul> <li>Java</li> <li>C#</li> <li>R</li> </ul> <p>TODO add descriptions and make Geomatics specific</p>"},{"location":"programming/_decision_tree/local/mobile/","title":"Mobile development","text":"<p>You are looking for a programming language for mobile applications! </p>"},{"location":"programming/_decision_tree/local/mobile/#languages","title":"Languages:","text":"MSc Geomatics language <p>If you're looking for a language that is used during Geomatics courses, you can use  JavaScript for mobile development!</p>"},{"location":"programming/_decision_tree/local/mobile/#native-development","title":"Native development:","text":"<ul> <li>Swift (iOS)</li> <li>Kotlin (Android)</li> </ul>"},{"location":"programming/_decision_tree/local/mobile/#cross-platform-development","title":"Cross-platform development","text":"<ul> <li>Flutter (Dart)</li> <li>React Native (JavaScript/TypeScript)</li> <li>Xamarin (C#)</li> <li>HTML5 and Apache Cordova</li> </ul> <p>Learn more</p> <p>Want to learn more? We recommend Choosing the best programming language for mobile app development by IBM.</p>"},{"location":"programming/_decision_tree/web/","title":"Web programming languages","text":"<p>You've chosen a web programming language!</p> <p>Projects that run on the web are usually divided in two separate sections. The frontend and the backend. Very simply said, the frontend runs in your browser, the backend runs on a server somewhere else. You'll learn more about this in GEO1007.</p> <p>TODO video about frontend VS backend</p>"},{"location":"programming/_decision_tree/web/#frontend-languages","title":"Frontend languages:","text":"<p>Basically, frontend is always done using  JavaScript (or its stricter sibling  TypeScript). Sometimes a framework is used in combination with these languages.</p>"},{"location":"programming/_decision_tree/web/#framework-examples","title":"Framework examples","text":"<ul> <li>React </li> <li>Angular</li> <li>Vue.js</li> <li>Svelte</li> <li>Preact</li> </ul> <p>Should I use a framework?</p> <p>We recommend this StackOverflow blog post about Does your web app need a front-end framework?.</p>"},{"location":"programming/_decision_tree/web/#backend-languages","title":"Backend languages:","text":"<ul> <li>Node.js</li> <li>Python (django or flask)</li> </ul>"},{"location":"programming/_decision_tree/web/#optionally","title":"Optionally:","text":"<ul> <li>Go</li> <li>Elixir</li> <li>Ruby (Ruby on Rails)</li> <li>Java (Spring boot)</li> <li>C# (.NET Core)</li> <li>Kotlin (Ktor)</li> <li>PHP (with Lavarel)</li> </ul> <p>TODO find guide online. Reference Geoweb. Make geomatics specific</p>"},{"location":"python/","title":"Python","text":"<p>Python is a programming language that's easy to read, write, and understand. It's used a lot in Geomatics because:</p> <ul> <li>Quick to write: When making scripts for data analysis, most of the time you care a lot about how fast you can write the code and not too much about how fast the code will run. Python is very quick to write.</li> <li>Many libraries: There are many so-called \"libraries\" made for Python and they're easy to install. These libraries contain code other people wrote, so you don't have to code everything yourself. For example, if you want to open a shapefile, someone made a library for that! See our list of useful libraries for Geomatics.</li> <li>Open source, free, very popular: Python is free for anyone to use, and its code is open source. There is lots of help out there on the internet, as it's one of the most popular programming languages worldwide. It's an industry standard in many Geomatics companies.</li> </ul>"},{"location":"python/#installing-python","title":"Installing Python","text":"<p>For Python code to run, you need a program called \"the Python interpreter\" (or more commonly \"Python\"). Often it's already installed on your computer, but we recommend against using the pre-installed Python.</p> (Optional) Why you should not use pre-installed Python <p>Sometimes there will already be a version of Python installed on your computer. Here are the main reasons you don't want to use this version:</p> <ul> <li>This Python is used by your operating system. If it somehow gets broken, other software on your computer depending on it might not work anymore and it will be very difficult to repair.</li> <li>This Python is usually an older version, sometimes even Python 2. Code written for a newer version of Python might not run or give errors.</li> </ul> <p>So what to do instead? We recommend installing and managing Python using \"pyenv\". Pyenv is a tool that allows you to install multiple versions of Python, and select which specific version is active.</p> <p>This guide shows you how to install Python using pyenv.</p>"},{"location":"python/#python-faq","title":"Python FAQ","text":"<p>When should I use Python for my project? (Over something like C++)</p> <p>Short answer: If you want to write code quickly, use lots of libraries, and speed isn't crucial. </p> <p>Long answer: See How to choose a programming language.</p>"},{"location":"python/#learning-python","title":"Learning Python","text":"<p>%% TODO</p>"},{"location":"python/#other-useful-python-resources","title":"Other useful Python Resources","text":"<ul> <li>We've made a list of a bunch of useful Python packages for Geomatics</li> </ul>"},{"location":"python/install/","title":"How to install Python using pyenv","text":"<p>Installing and using Python as recommended below has major benefits and will prevent problems in the future.</p> <p> Windows: use the python.org version!</p> <p>pyenv was created for macOS and Linux, and although it has a Windows version (called \"pyenv-win\"), this is not working very well and the installation is buggy. </p> <p>Therefore, for Windows we recommend you install Python \"the normal way\" (downloading from python.org), but we strongly recommend you use virtual environments.</p> <p>We recommend installing and managing Python using \"pyenv\".  pyenv is a tool that allows you to install multiple versions of Python, and select which specific version should be used.</p>  macOS Linux <p>To install Python via pyenv, make sure you have Homebrew installed and then run the following commands in your terminal.</p> <p>Step 1: Install pyenv using Homebrew <pre><code>brew install pyenv\n</code></pre> Then run the following commands, these set up pyenv for your terminal. <pre><code>conf_file=\"$HOME/.${SHELL##*/}\"rc\necho 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; \"$conf_file\"\necho 'command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; \"$conf_file\"\necho 'eval \"$(pyenv init -)\"' &gt;&gt; \"$conf_file\"\nexec \"$SHELL\"\n</code></pre></p> <p>Run the following commands in your terminal.</p> <p>Step 1: Install pyenv <pre><code>curl https://pyenv.run | bash\n</code></pre></p> <p>Step 2: Using pyenv, install Python 3.10.5</p> <p><pre><code>pyenv install 3.10.5\n</code></pre> This will install Python 3.10.5; on macOS and Linux you can omit the minor version (the <code>.5</code> at the end) and pyenv will automatically choose the latest version.</p> (Optional) What version of Python should I install? <p>How do I know which Python version I need? Generally it's recommended to use the previous version of Python (so if Python 3.11 is the latest, install 3.10). This is because it takes some time for libraries to be updated, so it's safer to use a version of Python which is more supported.</p> <p>You can use <code>pyenv install -l</code> to get a list of all available Python versions`</p> <p>Step 3: Check what version of Python is currently the default Python <pre><code>pyenv version\n</code></pre> If you already have a pre-installed Python, this will print <code>system</code>. It might also say \"No Python version has been set yet\". You can use this command anytime you want to check what version of Python is active.</p> <p>Step 4: Set your newly installed Python as default <pre><code>pyenv global 3.10.5\n</code></pre> This command sets your newly installed Python as the default Python for all terminals.</p>"},{"location":"python/jupyter/","title":"Jupyter Lab &amp; Notebooks","text":"<p>If you are working with Python, a great way to develop your code efficiently, especially when performing data analysis or creating proof-of-concepts, is to use Jupyter notebooks.  Here we are showing you how to do this through Jupyter lab, which is a web-based, interactive development environment that includes Jupyter notebooks. </p>"},{"location":"python/jupyter/#how-to-install-launch","title":"How to install &amp; launch","text":"Using the terminalUsing PyCharm <p>In your terminal, you can use <code>pip</code> to install Jupyter Lab packages.</p> <pre><code> pip install jupyterlab\n</code></pre> <p>Then you can launch the application with:</p> <pre><code>jupyter lab\n</code></pre> <p>This will start Jupyter Lab in your internet browser (eg Firefox/Chrome/Safari).  On the left panel you can navigate through your files and directories. The right panel is the Launcher; from here you can start a notebook, as shown below. </p> <p></p> <p>Warning</p> <p>This does not not with the free version of PyCharm (Community Edition). You need the Professional Edition (free for students).</p> <p>In PyCharm, open a project where you have one or more <code>*.ipynb</code> files and then install \"jupyterlab\" and \"jupyter\" packages:</p> <p></p> <p>and then you can simply run press Run/Play to run the cell that is currently selected, and you can select the one you want with the mouse.</p> <p> </p>"},{"location":"python/jupyter/#how-to-work-with-a-notebook","title":"How to work with a notebook","text":"<p>Within the new notebook, you can write small blocks of code in separate cells and run them individually by pressing <code>SHIFT+ENTER</code>. You can move cells around and collapse them, plot graphs and images and you can even add Markdown cells to document your process. </p> <p></p> <p>Info</p> <p>The biggest advantage of the notebook is that you do not need to rerun parts of code that might be time-consuming (eg loading a large TIF file). Once a cell is run, its state is preserved and subsequent cells can be changed and run independently. </p> <p>As shown below, you can use a exclamation mark to run bash commands (for example for installing a new python module to your environment) and a question mark to see some information about you functions an variables. </p> <p></p>"},{"location":"python/pip/","title":"Installing Python Packages using pip","text":"<p>This guide presumes you have installed Python using pyenv.</p> <p>All commands shown on this page are run in the terminal.</p> <p>Step 1: Make sure you are in the correct Python version <pre><code>pyenv version\n</code></pre> It should print the version you've installed, so <code>3.11.5</code> from our Python installation tutorial. Does it not? Run <code>pyenv global 3.11.5</code> to activate it.</p> <p>Are you using virtual environments? Then make sure it prints out the name of the environment you want to be in.</p> <p>If you are ever wondering why you get a <code>ModuleNotFoundError</code> even though you've just installed the library, it's probably because you had a different version of Python activated than what you're using to run your code.</p> <p>Step 2: Using pip, install the package</p> <p>In this example, we are installing the <code>numpy</code> package. <pre><code>pip install numpy\n</code></pre> It will print progress on the screen and tell you when it's done.</p> <p>The package is now installed!</p> <p>Installing multiple packages at once</p> <p>You can install multiple package at once by separating their names with spaces. If we want to install matplotlib, numpy, and pandas we can run  <pre><code>pip install matplotlib numpy pandas\n</code></pre></p> <p>See what packages are installed</p> <p>Want to know what is installed in your active version of Python? Use this command: <pre><code>pip list\n</code></pre> Which will print a list of all installed packages.</p> <p>More pip possibilities \u2b50\ufe0f Intermediate</p> <p>%%TODO add video about more pip options</p> <p>Or see the official documentation website of pip.</p>"},{"location":"python/pypackages/","title":"Useful Python packages for geomatics","text":"<p>How to install Python packages</p> <p>Please see our Install Python packages using pip guide.</p> <ul> <li>cjio: Python CLI + API to process and manipulate CityJSON files</li> <li>Fiona: to read/write GIS data, the \"Pythonic GDAL\"</li> <li>geemap: interactive mapping with Google Earth Engine</li> <li>GeoPandas: Pandas (for data science) with geo-types</li> <li>Laspy: to read/write/process point clouds in LAS/LAZ </li> <li>Matplotlib: great to visualise (mostly non-geo) data</li> <li>NumPy: multi-dimensional arrays</li> <li>pyproj: essential for dealing with CRS</li> <li>Rasterio: read/write/process raster data</li> <li>scikit-learn: machine learning in Python</li> <li>Shapely: processing of 2D vector data</li> <li>startinpy: Delaunay triangulator for terrain data</li> <li>TorchGeo: Deep Learning for GIS: datasets, samplers, transforms, and pre-trained models for geospatial data</li> </ul>"},{"location":"python/venv/","title":"Virtual environments (venv)","text":""},{"location":"python/venv/#what-is-a-venv","title":"What is a venv?","text":"<p>A Python virtual environment (venv) is \"created on top of an existing Python installation [...] and may optionally be isolated from the packages in the base environment\". Each venv will have its own set of Python packages, indepedent from the the main Python installation.</p> <p>It allows us to avoid this mess (from xkcd-1987):</p> <p></p>"},{"location":"python/venv/#how-to-create-and-use-a-venv","title":"How to create and use a venv","text":"Directly with PyCharmIf you use pyenvBuilt-in Pythonpyenv + PyCharm <p>PyCharm allows you to create venv and activate them, follow those instructions:</p> <p></p> <p>If you used pyenv to install Python (this is what we recommend for macOS and Linux!), then you can also install the pyenv-virtualenv plugin to install and manage your virtual environments. It keeps a global list of which versions and venv you have installed, and allows you to easily switch between them.</p> <p>To install:</p> <ul> <li>macOS: <code>brew install pyenv-virtualenv</code></li> <li>Linux: see details</li> </ul> <p>Some useful commands:</p> <ul> <li>create a new venv called \"myenv1\" (based on the current global version): <code>pyenv virtualenv myenv1</code></li> <li>activate it: <code>pyenv activate myenv1</code></li> <li>deactivate it: <code>pyenv deactivate</code></li> </ul> <p>venv are builtin Python, and you can install a venv in a specific folder. In the folder where you have some code, you can create a new venv:</p> <pre><code>python -m venv ./myenv\n</code></pre> <p>For Windows, replace <code>./myenv</code> by the path where you want the venv.</p> <p>Then the venv needs to be activated, how to do this depends on your OS and used console:</p> <p></p> <p>If you're still in the folder above, with macOS I need to:</p> <pre><code>source ./myvenv/bin/activate\n</code></pre> <p></p> <p>The new venv you created is empty, that is it should only have 2 packages as shown in the console above. You can install new packages with <code>pip install numpy</code> and those will be added in the venv. As long as you see the name of your venv between brackets (<code>(myenv)</code>) it means that you are using the venv.</p> <p>To stop using this venv:</p> <pre><code>deactivate\n</code></pre> <p>Just activate and select a new interpreter (which must be a venv, not a Python version!), following those steps:</p> <ol> <li></li> <li></li> <li></li> </ol>"},{"location":"research/msccode/","title":"MSc thesis code in Git","text":"<p>Following the open science requirements, it is now mandatory to release your code as open-source and to document it.</p> <p>You should first make sure that you have all the ingredients of a good Git repository, and then you can have a look at 4 good examples of repositories from MSc students:</p> <p> </p>"},{"location":"research/researchtips/","title":"Some research tips","text":"<p>This is a video that I (Hugo Ledoux) recorded to stop repeating the same every year for every MSc student.</p> <p>It's very opiniated, it is how I work. I hope it can help you find your way of working.</p> <p></p>"},{"location":"writing/","title":"Writing assignments/docs/thesis/etc","text":"<p>During the MSc Geomatics, you'll have to write reports, assignments, an MSc thesis, documentation for code, etc.</p> <p>While you could use Microsoft Word for those, we do not recommend it!</p> <p>Markdown  Best for documentation (this website is written in Markdown, see its source code)</p> <p>LaTeX  Best for MSc thesis and for assignment reports</p> <p>Typst  The \"new LaTeX\", will be great in 1-2y; live on the cutting edge!</p>"},{"location":"writing/latex/","title":"LaTeX","text":""},{"location":"writing/latex/#latex-installation","title":"LaTeX installation","text":""},{"location":"writing/latex/#web-application-overleaf","title":"Web-application: Overleaf","text":"<p>To start, the geogeek-in-chief recommends you use the online LaTeX environment Overleaf since it has a full installation of LaTeX and there is nothing to install. If you login with your TUDelft email, you get extra features (TUDelft pays for it).</p>"},{"location":"writing/latex/#local-installation","title":"Local installation","text":"<p>If you want to use LaTeX locally (it's faster to compile) then you need either:</p> <ul> <li>MiKTeX </li> <li>MacTeX </li> <li>TeXLive </li> </ul> <p>You can also combine the best of both worlds (overleaf and local), by using either the Git Integration to treat your Overleaf project as a remote repository or by using GitHub synchronisation linking your project to a GitHub repository. Check the recommendations for local editors below. </p> <p>Warning</p> <p>For small documents Overleaf is great. But it becomes rather slow for medium to large documents, and then using LaTeX locally is probably a better idea.</p> <p>Beware that pushes from Git/GitHub can result in the loss or displacement of track changes and comments, so make sure you don't mix the two (and make your supervisors aware).</p>"},{"location":"writing/latex/#getting-started","title":"Getting started","text":"<p>Overleaf's getting started with LaTeX</p> <p>The best is to follow the Overleaf's Learn LaTeX in 30min to start.</p> <p>The only crucial thing missing from it is how to add references, for this we suggest you use \"natbib\" (tutorial about bibliography management with natbib).</p>"},{"location":"writing/latex/#test-yourself-with-an-exercise","title":"Test yourself with an exercise","text":"<ol> <li>Register at https://overleaf.com with your <code>@tudelft.nl</code> email (for an account with more options, TUDelft pays for it)</li> <li>Start with the template below and discover/try some features. Notice that this won't compile correctly because of the reference on line 26: the file <code>myreferences.bib</code> should be in the same folder</li> <li>copy the content of the second file to a file <code>myreferences.bib</code> and add it to the same folder</li> <li>check this demo template to know the best way to make complex things (tables, code, etc.)</li> <li>when all this works, try to replicate this PDF</li> </ol> <p>SOLUTION</p>"},{"location":"writing/latex/#a-better-starting-template-for-simple-latex","title":"A better starting template for simple LaTeX","text":"<pre><code>\\documentclass[a4paper,11pt]{scrartcl}\n\n\\usepackage{graphicx}\n\\usepackage[utf8]{inputenc} %-- pour utiliser des accents en fran\u00e7ais\n\\usepackage{amsmath,amssymb,amsthm} \n\\usepackage[round]{natbib}\n\\usepackage{url}\n\\usepackage{mathpazo}\n\\usepackage{booktabs}\n\\usepackage{hyperref}\n\n\\title{My great title}\n\\author{Jan Smit\\\\ \\url{j.smit@tudelft.nl}}\n\\date{\\today}\n\n\\begin{document}\n\n\\maketitle\n\n\\section{Introduction}\n\nLemongrass frosted gingerbread bites banana bread orange crumbled lentils sweet potato black bean burrito green pepper springtime. \nStrawberry ginger lemongrass agave green tea smoky maple tempeh glaze enchiladas couscous. \nCranberry spritzer Malaysian cinnamon pineapple salsa apples spring cherry bomb bananas blueberry pops scotch bonnet pepper.\n\nBento box roasted peanuts pasta Sicilian~\\citep{DeVries20}.\n\n\\bibliographystyle{abbrvnat}\n\\bibliography{references.bib}\n\n\\end{document}\n</code></pre> <pre><code>@article{DeVries20,\n  author = {De Vries, Piet},\n  doi = {10.1016/j.scs.2022.104225},\n  journal = {Sustainable Cities and Society},\n  pages = {102222},\n  title = {Understanding the relationship between urban morphology and other things},\n  year = {2021}\n}\n</code></pre>"},{"location":"writing/latex/#figures","title":"Figures","text":"<p>Important</p> <p>Make sure your figures are vector when possible, and not raster.  This will make them of greater quality, especially for text.</p> <p>Vector formats: PDF, SVG.</p> <p>Raster formats: PNG, JPG, JPEG, GIF.</p> <p></p> <p>Best vector graphics drawing tools:</p> <ul> <li>Affinity Designer  (\u20ac\u20ac but way less than Adobe)</li> <li>Inkscape </li> <li>IPE  (integrates LaTeX text; great for triangulation and geometric stuff)</li> <li>Adobe Illustrator   (nice, but \u20ac\u20ac\u20ac)</li> </ul>"},{"location":"writing/latex/#tables","title":"Tables","text":"<p>Tables are notoriously difficult to make in LaTeX.</p> <p>Tip</p> <p>LaTeX package booktabs is strongly recommended!</p> <pre><code>The package \\texttt{booktabs} permits you to make nicer tables than the basic ones in \\LaTeX.\nSee for instance \\autoref{tab:example}.\n\n\\usepackage{booktabs}\n...\n\\begin{table}\n  \\centering\n  \\begin{tabular}{@{}lrrcrrc@{}} \\toprule\n    &amp; \\multicolumn{2}{c}{3D model} &amp;&amp; \\multicolumn{2}{c}{input} \\\\\n    \\cmidrule{2-3}  \\cmidrule{5-6} \n    &amp; solids &amp; faces &amp;&amp; vertices &amp; constraints  \\\\ \n    \\toprule\n    \\textbf{campus}  &amp; 370   &amp; 4~298  &amp;&amp; 5~970  &amp; 3~976   \\\\\n    \\textbf{kvz}     &amp; 637   &amp; 6~549  &amp;&amp; 8~951  &amp; 13~571  \\\\\n    \\textbf{engelen} &amp; 1~629 &amp; 15~870 &amp;&amp; 23~732 &amp; 15~868 \\\\ \n    \\bottomrule\n   \\end{tabular}\n  \\caption{Details concerning the datasets used for the experiments.}%\n\\label{tab:example}\n\\end{table}\n</code></pre>"},{"location":"writing/latex/#flowcharts","title":"Flowcharts","text":"<ul> <li>draw.io  (free, simple, all you probably need)</li> <li>OmniGraffle  (nice, but \u20ac\u20ac\u20ac)</li> </ul>"},{"location":"writing/latex/#tips-and-tricks-for-latex","title":"Tips and tricks for LaTeX","text":"<p> this simple demo gives you tips and tricks to do most of the useful things in LaTeX.</p> <p>Use it as the template for submitting your homework for instance.</p> <p>Info</p> <p>LaTeX is great but there are often 37 ways to accomplish something... The simple demo shows you what we think is \"the best to do X\".</p>"},{"location":"writing/latex/#which-software-to-use","title":"Which software to use?","text":""},{"location":"writing/latex/#editors-if-you-dont-use-overleaf-or-use-gitgithub-to-edit-your-overleaf-project-locally","title":"Editors (if you don't use Overleaf, or use Git/GitHub to edit your Overleaf project locally)","text":"<ul> <li>TeXnicCenter </li> <li>TeXStudio </li> <li>TeXshop  (bundled with MacTeX)</li> <li>Visual Studio Code as generic editor with the LaTeX Workshop plugin </li> <li>Texmaker </li> <li>Sublime Text  (TeX support can be added through package control with the LaTeXTools package; also with package control you can get a nice linter called SublimeLinter with TeX support through SublimeLinter-chktex)</li> </ul> <p>Info</p> <p>For some of these editors, you can also add local grammar/spell checking, e.g. LTeX for Visual Studio Code or LanguageTool for Sublime Text.</p>"},{"location":"writing/latex/#managing-references","title":"Managing references","text":"<ul> <li>JabRef </li> <li> <p>Zotero  (integrations for Office and browsers; use a plugin like better bibtex)   </p> </li> <li> <p>BibDesk </p> </li> </ul>"},{"location":"writing/latex/#drawing-figures","title":"Drawing figures","text":"<ul> <li>IPE  (integrates LaTeX text; great for triangulation and geometric stuff)</li> <li>Affinity Designer  (\u20ac\u20ac but way less than Adobe)</li> <li>Inkscape </li> <li>Adobe Illustrator  (nice, but \u20ac\u20ac\u20ac)</li> </ul>"},{"location":"writing/latex/#drawing-flowcharts","title":"Drawing flowcharts","text":"<ul> <li>MathCha </li> <li>draw.io </li> <li>OmniGraffle  (nice, but \u20ac\u20ac\u20ac)</li> </ul>"},{"location":"writing/latex/#equation-writers","title":"Equation writers","text":"<ul> <li>Grapher  (graphical interface to write equations that offers the option to copy them as LaTeX expression)</li> <li>LaTeXiT  (utility to write equations in LaTeX and export them for use in other software)</li> <li>Mathpix Snip  (many cool things with equations)</li> </ul>"},{"location":"writing/latex/#help-to-make-tables","title":"Help to make tables","text":"<ul> <li>Tables Generator  (LaTeX tables are tough to type and align, this helps greatly to start)</li> </ul>"},{"location":"writing/latextogether/","title":"Writing LaTeX with other people","text":"<p>Note</p> <p>This is taken from The Rules for happily collaborating on a LaTeX document\u00a9.</p> <p>The 10 rules you should follow if you're writing a LaTeX documents with other people.</p>"},{"location":"writing/latextogether/#1-you-shall-use-only-one-sentence-per-line","title":"1. You shall use only one sentence per line","text":"<p>And use one empty line to start a new paragraph. It'll then be easier to track changes in Git, since these are line-based.</p> <pre><code>I like to create buffers in ArcGIS.\nBut it is not always possible as it often crashes.\n\nAlso, ...\n</code></pre>"},{"location":"writing/latextogether/#2-you-shall-use-natbib-for-citations","title":"2. You shall use natbib for citations","text":"<p>and the commands <code>\\citet{}</code> (cite in the text as a noun) <code>\\citep{}</code> (cite between parentheses). </p> <pre><code>\\usepackage[round]{natbib}\n...\n\\citet{Smith00} succeeded in creating a buffer.\nHowever, it has been shown that it is not an easy task~\\citep{Brown90}.\n</code></pre>"},{"location":"writing/latextogether/#3-you-shall-prevent-breaking-lines-with-when-referencing-and-citing","title":"3. You shall prevent breaking lines with \"~\" when referencing and citing","text":"<pre><code>In Section~\\ref{sec:intro}, we can observe that the buffer was a success~\\citep{Smith99}.\n</code></pre>"},{"location":"writing/latextogether/#4-you-shall-use-one-for-an-hyphen-two-for-a-range-between-numbers-and-three-for-a-punctuation-in-a-sentence","title":"4. You shall use one <code>-</code> for an hyphen, two <code>--</code> for a range between numbers, and three <code>---</code> for a punctuation in a sentence","text":"<pre><code>I like---unlike my father---to build multi-dimensional models, \nespecially those made in 1990--1995.\n</code></pre>"},{"location":"writing/latextogether/#5-you-shall-give-meaningful-labels","title":"5. You shall give meaningful labels","text":"<p>A figure's label should start with <code>fig:</code> and a section's label with <code>sec:</code></p> <pre><code>\\section{Introduction}  \n\\label{sec:intro}\n\nIn recent years, buffers have been rather complex to implement because ...\n</code></pre>"},{"location":"writing/latextogether/#6-you-shall-put-a-short-space-after-eg-and-ie-with-the-use-of-a-backslash","title":"6. You shall put a short space after e.g. and i.e. with the use of a backslash","text":"<p>The following two commands shall thus be used:</p> <pre><code>\\newcommand{\\ie}{i.e.}\n\\newcommand{\\eg}{e.g.}\n...\nBuffers can be generated on different geometries, \\eg\\ points, polylines and polygons.\n</code></pre>"},{"location":"writing/latextogether/#7-you-shall-put-all-figuresgraphs-in-a-single-subfolder-figs","title":"7. You shall put all figures/graphs in a single subfolder (<code>figs/</code>)","text":"<p>And you shall put the source file (eg IPE, OmniGraffle, Illustrator, etc.) there as well for future use.</p> <p>You can then use this to specify the relative path for all figures (it refers to the figure <code>./figs/potato.pdf</code>):</p> <pre><code>\\graphicspath{{figs/}}\n\n\\includegraphics[width=0.95\\linewidth]{potato.pdf}\n</code></pre>"},{"location":"writing/latextogether/#8-in-your-bibtex-file-you-shall-use-curly-brackets-for-wordsletters-you-want-to-have-capitalised-in-the-title","title":"8. In your BibTeX file, you shall use curly brackets for words/letters you want to have capitalised in the title","text":"<p>The other fields are not affected by this. LaTeX does this to uniformise the capitalisation in all citations.</p> <pre><code>@article{Smith00,\n  Author = {Smith, John},\n  Journal = {The GIS Journal},\n  Title = {The {3D} {CityGML} building was constructed with the {Delaunay} triangulation},\n  Year = {2001},\n  ...\n}\n</code></pre>"},{"location":"writing/latextogether/#9-you-shall-not-add-any-commands-to-change-the-format-until-the-the-paper-is-finished","title":"9. You shall not add any commands to change the format until the the paper is finished","text":"<p><code>\\vspace</code> and <code>\\newpage</code> are thus forbidden.</p>"},{"location":"writing/latextogether/#10-you-shall-declare-all-sizes-relative-to-linewidth","title":"10. You shall declare all sizes relative to <code>\\linewidth</code>.","text":"<p>So that the paper can be switched to a 2-column one without (too much) pain.</p> <pre><code>\\includegraphics[width=0.95\\linewidth]{potato.pdf}\n</code></pre>"},{"location":"writing/markdown/","title":"Markdown","text":"<p>Markdown is a simple and easy-to-read language for formatting plain text.</p> <p>It is widely used to write documentation and research papers (eg see R Markdown), GitHub uses it as the default for README files, and many websites are written in Markdown (before being automatically converted to HTML).</p> <p>The geogeeks website is written in Markdown, see the source of this page!</p>"},{"location":"writing/markdown/#getting-started","title":"Getting started","text":"<p>Markdown Guide Getting Started</p> <p>Arguably the best cheat sheet!</p> <p>markdown-cheat-sheet.md </p>"},{"location":"writing/markdown/#markdown-basic-extended-versions","title":"Markdown: basic + extended versions","text":"<p>The original Markdown is rather limited, but it has been extended by several to add more complex features (like tables,  code-blocks, or admonitions).</p> <p>Watch out, it's a bit the far-west out there: some processors might not be able to parse your flavour of Markdown correctly!?</p> <p>GitHub Flavoured Markdown</p> <p>GitHub offers an useful overview of the features they added for their extended version called \"GitHub Flavoured Markdown (GFM)\".</p>"},{"location":"writing/markdown/#test-yourself-with-an-exercise","title":"Test yourself with an exercise","text":"<ul> <li>exercise #1: HTML page to replicate (use PyCharm)</li> <li>exercise #2: convert your .md file to a PDF with Pandoc </li> </ul> <p>SOLUTION TO #1 </p>"},{"location":"writing/markdown/#software-to-process-markdown","title":"Software to process Markdown","text":"<ul> <li>PyCharm/CLion will preview automatically any Markdown files</li> <li>any file <code>.md</code> pushed to GitHub will be rendered automatically</li> <li>dillinger.io: a handy web-preview tool</li> <li>Exhaustive list of processors</li> </ul>"},{"location":"writing/references/","title":"References (BibTeX)","text":"<p>The BibTeX format is what LaTeX and Typst use managing references. It is simple, and just works; we recommend you use it.</p> <p>Manually editing your <code>.bib</code> is probably a bad idea, so we suggest you use a GUI that will help you create the entries and search your database.</p>"},{"location":"writing/references/#software-to-manage-references","title":"Software to manage references","text":"<ul> <li>JabRef </li> <li>Zotero  (integrations for Office and browsers; use a plugin like better bibtex)</li> <li>Mendeley  (integrations for Office and browsers; integrates with Overleaf professional accounts)</li> <li>BibDesk </li> </ul> <p>Warning</p> <p>BibTeX will capitalise the titles automatically according to the bibliography style (<code>*.bib</code>) you choose. This can be problematic for acronyms and many words (eg GIS, CityJSON, 3D, Delft Univeristy of Technology, etc.). You can control the capitalisation of those words by adding curly-brackets around those words, like in the following: <pre><code>@article{Guth21,\n    author = {Elvis Presley and Tera M. Smith},\n    title = {Point cloud and {ICESat-2} evaluation of {3D} datasets in {Delft}},\n    journal = {Transactions in {GIS}},\n    number = {2},\n    pages = {245--261},\n    volume = {15},\n    year = {2011}\n}\n</code></pre></p>"},{"location":"writing/references/#how-to-obtain-well-formatted-bibtex-entries","title":"How to obtain well-formatted BibTeX entries?","text":""},{"location":"writing/references/#option-1-paste-a-doi","title":"Option #1: Paste a DOI","text":"<p>With BibDesk (and probably others) you can simply copy the DOI and a new entry nicely formatted will be created (might need minimal manual work).</p>"},{"location":"writing/references/#option-2-use-wwwdoi2biborg","title":"Option #2: Use www.doi2bib.org","text":"<p>You could alternatively use www.doi2bib.org to obtain nicely formatted BibTeX entries.</p>"},{"location":"writing/references/#option-3-use-chatgpt","title":"Option #3: Use ChatGPT","text":"<p>ChatGPT can also take the text of a reference in a PDF and BibTeX format it, see a simple example:</p> <p></p>"},{"location":"writing/typst/","title":"Typst","text":"<p>Typst is the \"new LaTeX\": simpler to learn, simpler to modify the layout, about 9423.6X faster. But also, at the moment, has fewer features, can be a bit buggy, the base code changes often (which can break some functions), etc. </p> <p>So great to use, but be warned a bit...</p>"},{"location":"writing/typst/#typst-installation","title":"Typst installation","text":""},{"location":"writing/typst/#web-application-typstapp","title":"Web-application: Typst.app","text":"<p>The web-application of Typst is free, the rending in real-time works great, and it has collaboration tools integrated.  The only potential drawback is that not all fonts are present; with a local installation you can use any fonts on your computer.</p> <p></p>"},{"location":"writing/typst/#local-installation","title":"Local installation","text":"<ol> <li>Follow those instructions for your OS</li> <li>Install VSCode</li> <li>and the Tinymist extension for it, it offers real-time preview/rendering</li> </ol>"},{"location":"writing/typst/#getting-started","title":"Getting started","text":"<p>Tutorial Writing in Typst</p> <p>The best is to follow the official tutorial to start.</p> <p>The only crucial thing missing from it is how to add references, for this we suggest you use LaTeX's BibTeX \"natbib\" (tutorial about bibliography management with natbib).</p> <p>We provide a MSc Geomatics thesis template, where you can find a lot of examples: how to place a figure, pseudo-code, tables, etc.</p> <p>Are you already familiar with LaTeX?</p> <p>If you're used to LaTeX, see the handy Guide for LaTeX users.</p>"},{"location":"writing/typst/#managing-references","title":"Managing references","text":"<p>As with LaTeX, BibTeX can be used. This is a good cross-platform one:</p> <ul> <li>JabRef (cross-platform)</li> </ul>"},{"location":"writing/typst/#drawing-figures","title":"Drawing figures","text":"<ul> <li>IPE (cross-platform; integrates LaTeX text; great for triangulation and geometric stuff)</li> <li>Adobe Illustrator (nice, but \u20ac\u20ac\u20ac)</li> <li>Inkscape (cross-platform)</li> </ul>"},{"location":"writing/typst/#templates","title":"Templates","text":"<ol> <li>For student reports. Made by an MSc Geomatics student (@ZokszY)</li> <li>For the MSc thesis. A port of the MSc Geomatics thesis LaTeX template that has been used for year.</li> </ol>"}]}